@page "/AccountTransactions"

<MudText Typo="Typo.h6">Account Transactions</MudText>
    <MudButton Variant="Variant.Filled" Height="200px" Color="Color.Primary" @onclick="ShowModal">Add Transaction</MudButton>
    <div style="margin-top:10px">
    <MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Virtualize="true" FixedHeader="true" Filter="new Func<AccountTransactionDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>CreatedOn</MudTh>
        <MudTh>Account</MudTh>
        <MudTh>Amount</MudTh>
        <MudTh>Credit</MudTh>
        <MudTh>Debit</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="CreatedOn">@context.TransactionDate</MudTd>
        <MudTd DataLabel="Account">@context.AccountName</MudTd>
        <MudTd DataLabel="Amount">@context.Amount</MudTd>
        <MudTd DataLabel="Credit">@context.Credit</MudTd>
        <MudTd DataLabel="Debit">@context.Debit</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>EditTransaction(@context.Id))" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" />
            <MudFab @onclick="@(()=>DeleteTransaction(@context.Id))" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
  </MudTable>
</div>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private AccountTransactionDto selectedItem1 = null;

    private List<AccountTransactionDto> Elements { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Elements = await Http.GetFromJsonAsync<List<AccountTransactionDto>>("/api/AccountTransaction/GetTransactions");
    }


    private bool FilterFunc1(AccountTransactionDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(AccountTransactionDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        //if (element.Account.AccountName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;

        return false;
    }

    async Task EditTransaction(string TransactionId)
    {
        AccountTransactionDto transaction = Elements.FirstOrDefault(x => x.Id == TransactionId);
        if(transaction != null)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(EditAccountTransaction.Transaction), transaction);

            var transactionModal = Modal.Show<EditAccountTransaction>("Edit Account Transaction", parameters);
            var result = await transactionModal.Result;
            if(result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
            }
            else
            {
                AccountTransactionDto updatedTransaction = (AccountTransactionDto)result.Data;
                var originalTransaction = Elements.FirstOrDefault(t => t.Id == updatedTransaction.Id);
                if(originalTransaction != null)
                {
                    originalTransaction.AccountId = updatedTransaction.AccountId;
                    originalTransaction.AccountName = updatedTransaction.AccountName;
                    originalTransaction.Amount = updatedTransaction.Amount;
                    originalTransaction.Credit = updatedTransaction.Credit;
                    originalTransaction.Debit = updatedTransaction.Debit;
                    originalTransaction.Description = updatedTransaction.Description;
                    StateHasChanged();
                }         

            }
        }
    }

    async Task DeleteTransaction(string Id)
    {
        AccountTransactionDto transaction = Elements.FirstOrDefault(x => x.Id == Id);
        if(transaction != null)
        {
            var transactionModal = Modal.Show<ConfirmDelete>("Confirm Delete");
            var result = await transactionModal.Result;
            if(result.Cancelled == false)
            {
                var response = await Http.DeleteAsync($"/api/AccountTransaction/{Id}");
                if(response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Deletion Was Successful", Severity.Info);
                    Elements.Remove(transaction);
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add("Deletion Failed", Severity.Error);   
                }
            }
        }
    }

    async Task ShowModal()
    {
        var transactionModal = Modal.Show<AddAccountTransaction>("Add Transaction");
        var result = await transactionModal.Result;
        if(result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            Console.WriteLine(result.Data);
            Elements.Add((AccountTransactionDto) result.Data);
            StateHasChanged();
        }
    }
}
