@using System.Net.Http.Headers


<div class="mt-3">
    <InputFile class="my-input-file" OnChange="@OnInputFileChange"></InputFile>
    
</div>

@code {
    [Parameter]
    public string ImgUrl { get; set; }

    [Parameter]
    public EventCallback<string> OnChange { get; set; }

    private long FileSize { get; set; }
    private string FileName { get; set; }
    private string FileType { get; set; }
    public DateTimeOffset LastModified { get; set; }
    const int MAXFILE_SIZE = 5000 * 1024;
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var browserFile = e.File;
        if (browserFile != null)
        {
            FileSize = browserFile.Size;
            FileName = browserFile.Name;
            FileType = browserFile.ContentType;
            LastModified = browserFile.LastModified;

            try
            {
                using var content = new MultipartFormDataContent();
                var fileStream = new StreamContent(browserFile.OpenReadStream(MAXFILE_SIZE));
                fileStream.Headers.ContentType = new MediaTypeHeaderValue(browserFile.ContentType);
                content.Add(content: fileStream, name: "file", browserFile.Name);

                var result = await Http.PostAsync("api/AccountTransaction/UploadFile", content);

                if (result.IsSuccessStatusCode)
                {
                    ImgUrl = await result.Content.ReadAsStringAsync();
                    await OnChange.InvokeAsync(ImgUrl);
                }
                else
                {
                    Snackbar.Add("Unable to load file", Severity.Warning);
                }

            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Warning);
            }
        }
    }

}
