@page "/CashOut"
@attribute [Authorize(Roles = "Admin")]

<MudText Typo="Typo.h6">Transactions (Cash In)</MudText>
    <div style="margin-top:10px">
    <MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Virtualize="true" FixedHeader="true" Filter="new Func<SalesDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudSelect T="string" @bind-Value="@period" SelectedValuesChanged="@(() => PeriodChanged())" Label="Transactions For" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" >
            <MudSelectItem Value="@("Today")" />
            <MudSelectItem Value="@("This Week")" />
            <MudSelectItem Value="@("This Month")" />
            
        </MudSelect>

    </ToolBarContent>
    <HeaderContent>
        <MudTh>EntryDate</MudTh>
        <MudTh>DrawDate</MudTh>
        <MudTh>Account</MudTh>
        <MudTh>Agent</MudTh>
        <MudTh>Amount</MudTh>
        <MudTh>Description</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="EntryDate">@context.EntryDate</MudTd>
        <MudTd DataLabel="DrawDate">@context.DrawDate</MudTd>
        <MudTd DataLabel="Account">@context.AccountName</MudTd>
        <MudTd DataLabel="Agent">@context.AgentName</MudTd>
        <MudTd DataLabel="Amount">@String.Format("{0:0,0.00}",context.WinAmount)</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
  </MudTable>
</div>

<MudCard Outlined="true">
    <MudCardContent>
        <MudText Typo="Typo.h6">Summary</MudText>
        <MudText Typo="Typo.body2" >Total Transactions: @TotalNum</MudText>
        <MudText Typo="Typo.body2" >Total Amount:   GH₵ @String.Format("{0:0,0.00}",TotalAmount)</MudText>
    </MudCardContent>
</MudCard>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private SalesDto selectedItem1 = null;

    private List<SalesDto>? Elements { get; set; }

    public int TotalNum { get; set; }
    public decimal TotalAmount { get; set; }

    string period = "Today";


    protected override async Task OnInitializedAsync()
    {
        Elements = await Http.GetFromJsonAsync<List<SalesDto>>($"/api/AccountTransaction/CashOut/{period}");
        TotalAmount = Elements.Sum(x => x.WinAmount);
        TotalNum = Elements.Count;
    }


    private bool FilterFunc1(SalesDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(SalesDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        //if (element.Account.AccountName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;

        return false;
    }

    async Task PeriodChanged()
    {
        Elements = await Http.GetFromJsonAsync<List<SalesDto>>($"/api/AccountTransaction/CashOut/{period}");
        TotalAmount = Elements.Sum(x => x.WinAmount);
        TotalNum = Elements.Count;
    }
}
