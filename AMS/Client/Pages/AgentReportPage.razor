@page "/AgentReport"
@attribute [Authorize(Roles = "Admin, Sales")]

<MudText Typo="Typo.h6">AGENT REPORT</MudText>
<button class="btn btn-secondary" onclick="window.print()">PRINT<i class="fa fa-print"></i></button>
<div style="margin-top:10px">
    
    <MudDataGrid Items="@Elements" ReadOnly="@_isReadOnly" EditMode="@DataGridEditMode.Cell" Virtualize="true" FixedHeader="true" Filterable="true" QuickFilter="new Func<AgentReportDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudSpacer />
            <MudDatePicker Label="From" Editable="true" @bind-Date="start" PickerClosed="PeriodChanged" Placeholder="Select Date" />
            <MudSpacer />
            <MudDatePicker Label="To" Editable="true" @bind-Date="end" PickerClosed="PeriodChanged" Placeholder="Select Date" />
            <MudSpacer />
            <MudSelect T="string" Label="Select Agent" @bind-Value="searchString1" AnchorOrigin="Origin.BottomCenter"
                       SelectedValuesChanged="@(()=>CalculateSummuries(@searchString1))" Variant="Variant.Outlined">
                <MudSelectItem Value="@("")">All</MudSelectItem>
                @foreach (var agent in Elements.DistinctBy(x => x.Name))
                {
                    <MudSelectItem T="string" Value="@agent.Name">@agent.Name</MudSelectItem>
                }
            </MudSelect>
        </ToolBarContent>
        <Columns>
        <HierarchyColumn T="AgentReportDto" />
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Sales">
            <FooterTemplate>
              @String.Format("{0:0,0.00}",DailySales)
            </FooterTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Wins">
           <FooterTemplate>
              @String.Format("{0:0,0.00}",Wins)
           </FooterTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Payin">
           <FooterTemplate>
               @String.Format("{0:0,0.00}",Payin)
           </FooterTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Payout">
           <FooterTemplate>
              @String.Format("{0:0,0.00}",Payout)
           </FooterTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.ExpenseAmount">
            <FooterTemplate>
              @String.Format("{0:0,0.00}", ExpenseAmount)
            </FooterTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Balance">
           <FooterTemplate>
               @String.Format("{0:0,0.00}",OutstandingBalance)
           </FooterTemplate>
        </PropertyColumn>
    </Columns>
    <ChildRowContent>
        <MudGrid>
            <MudItem xs="12">
               <MudText>Sales</MudText>
               <MudTable Items="@context.Item.Details" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Virtualize="true" FixedHeader="true">
                   <HeaderContent>
                       <MudTh>Entry Date</MudTh>
                       <MudTh>Draw Date</MudTh>
                       <MudTh>Opening Balance</MudTh>
                       <MudTh>Sales</MudTh>
                       <MudTh>Wins</MudTh>
                       <MudTh>Payin</MudTh>
                       <MudTh>Payout</MudTh>
                       <MudTh>Expenses</MudTh>
                       <MudTh>End Balance</MudTh>
                   </HeaderContent>
                   <RowTemplate Context="d">
                       <MudTd>@d.EntryDate?.ToShortDateString()</MudTd>
                       <MudTd>@d.DrawDate?.ToShortDateString()</MudTd>
                       <MudTd>@String.Format("{0:0,0.00}",d.OpeningBalance)</MudTd>
                       <MudTd>@String.Format("{0:0,0.00}",d.DailySales)</MudTd>
                       <MudTd>@String.Format("{0:0,0.00}",d.WinAmount)</MudTd>
                       <MudTd>@String.Format("{0:0,0.00}",d.PayinAmount)</MudTd>
                       <MudTd>@String.Format("{0:0,0.00}",d.PayoutAmount)</MudTd>
                       <MudTd>@String.Format("{0:0,0.00}", d.ExpenseAmount)</MudTd>
                       <MudTd>@String.Format("{0:0,0.00}",d.EndBalance)</MudTd>
                   </RowTemplate>
                   <FooterContent>
                       <MudTd></MudTd>
                       <MudTd></MudTd>
                       <MudTd>@String.Format("{0:0,0.00}",@context.Item.Details.Sum(x=>x.OpeningBalance))</MudTd>
                       <MudTd>@String.Format("{0:0,0.00}",@context.Item.Details.Sum(x=>x.DailySales))</MudTd>
                       <MudTd>@String.Format("{0:0,0.00}",@context.Item.Details.Sum(x=>x.WinAmount))</MudTd>
                       <MudTd>@String.Format("{0:0,0.00}",@context.Item.Details.Sum(x=>x.PayinAmount))</MudTd>
                       <MudTd>@String.Format("{0:0,0.00}",@context.Item.Details.Sum(x=>x.PayoutAmount))</MudTd>
                       <MudTd>@String.Format("{0:0,0.00}", @context.Item.Details.Sum(x => x.ExpenseAmount))</MudTd>
                       <MudTd>@String.Format("{0:0,0.00}", @context.Item.Details.Sum(x => x.EndBalance))</MudTd>
                   </FooterContent>
               </MudTable>
            </MudItem>
        </MudGrid>
    </ChildRowContent>
    <PagerContent>
         <MudDataGridPager T="AgentReportDto" />
    </PagerContent>
</MudDataGrid>

</div>


    @code {
    private bool _isReadOnly = true;
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private AgentReportDto selectedItem1 = null;
    DateTime? start = DateTime.Today;
    DateTime? end = DateTime.Today;
    private IEnumerable<AgentDto> agents = new List<AgentDto>();

    private List<AgentReportDto>? Elements { get; set; }


    public int TotalNum { get; set; }
    public decimal DailySales { get; set; }
    public decimal Wins { get; set; }
    public decimal OutstandingBalance { get; set; }
    public decimal Payin { get; set; }
    public decimal Payout { get; set; }
    public decimal ExpenseAmount { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var response = await Http.PostAsJsonAsync($"/api/Agent/GetAgentReports", new AMS.Shared.DateRange { StartDate = start, EndDate = end });
        if (response.IsSuccessStatusCode)
        {
            Elements = await response.Content.ReadFromJsonAsync<List<AgentReportDto>>();
            DailySales = Elements.Sum(x => x.Sales);
            Wins = Elements.Sum(x => x.Wins);
            Payin = Elements.Sum(x => x.Payin);
            Payout = Elements.Sum(x => x.Payout);
            ExpenseAmount = Elements.Sum(x => x.ExpenseAmount);
            OutstandingBalance = Elements.Sum(x => x.Balance);
            TotalNum = Elements.Count;
        }
        await GetAgents();
    }


    private bool FilterFunc1(AgentReportDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(AgentReportDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private void CalculateSummuries(string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            DailySales = Elements.Sum(x => x.Sales);
            Wins = Elements.Sum(x => x.Wins);
            Payin = Elements.Sum(x => x.Payin);
            Payout = Elements.Sum(x => x.Payout);
            ExpenseAmount = Elements.Sum(x => x.ExpenseAmount);
            OutstandingBalance = Elements.Sum(x => x.Balance);
            TotalNum = Elements.Count;
        }
        if (Elements.Select(x => x.Name.ToUpper()).Contains(searchString.ToUpper()))
        {
            DailySales = Elements.Where(x => x.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x => x.Sales);
            Wins = Elements.Where(x => x.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x => x.Wins);
            Payin = Elements.Where(x => x.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x => x.Payin);
            Payout = Elements.Where(x => x.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x => x.Payout);
            ExpenseAmount = Elements.Where(x => x.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x => x.ExpenseAmount);
            OutstandingBalance = Elements.Where(x => x.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x => x.Balance);
            TotalNum = Elements.Where(x => x.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Count();
        }
        if (Elements.Select(x => x.Game.ToUpper()).Contains(searchString.ToUpper()))
        {
            DailySales = Elements.Where(x => x.Game.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x => x.Sales);
            Wins = Elements.Where(x => x.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x => x.Wins);
            Payin = Elements.Where(x => x.Game.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x => x.Payin);
            Payout = Elements.Where(x => x.Game.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x => x.Payout);
            ExpenseAmount = Elements.Where(x => x.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x => x.ExpenseAmount);
            OutstandingBalance = Elements.Where(x => x.Game.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x => x.Balance);
            TotalNum = Elements.Where(x => x.Game.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Count();
        }
    }

    async Task PeriodChanged()
    {
        var dateRange = new AMS.Shared.DateRange { StartDate = start, EndDate = end };
        var response = await Http.PostAsJsonAsync($"/api/Agent/GetAgentReports", dateRange);
        if (response.IsSuccessStatusCode)
        {
            Elements = await response.Content.ReadFromJsonAsync<List<AgentReportDto>>();
            DailySales = Elements.Sum(x => x.Sales);
            Wins = Elements.Sum(x => x.Wins);
            Payin = Elements.Sum(x => x.Payin);
            Payout = Elements.Sum(x => x.Payout);
            OutstandingBalance = Elements.Sum(x => x.Balance);
            TotalNum = Elements.Count;
        }
    }

    private async Task GetAgents()
    {
        var result = await Http.GetFromJsonAsync<List<AgentDto>>("api/Agent/GetAgents");
        if (result is not null)
        {
            agents = result;
        }
        else
        {
            agents = new List<AgentDto>();
        }
    }
}

