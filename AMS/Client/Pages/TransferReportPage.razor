@implements IDisposable
@page "/TransferReport"
@attribute [Authorize]
<MudText>TRANSFER REPORT</MudText><button class="btn btn-secondary" onclick="window.print()">PRINT<i class="fa fa-print"></i></button>
    <MudButton Variant="Variant.Filled" Height="200px" Color="Color.Primary" @onclick="@(() => Modal.Show<AddAdminTransaction>("Transfer"))">Transfer</MudButton>
    <div style="margin-top:10px">
    <MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Virtualize="true" FixedHeader="true" Filter="new Func<TransferDto,bool>(FilterFunc1)" 
        @bind-SelectedItem="selectedItem1" CustomHeader="true" CustomFooter="true">
    <ToolBarContent>
        
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" TextChanged ="@(()=>CalculateSummuries(@searchString1))" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudDatePicker Label="From" Editable="true" @bind-Date="start" PickerClosed="PeriodChanged" Placeholder="Select Date" />
        <MudSpacer />
        <MudDatePicker Label="To" Editable="true" @bind-Date="end" PickerClosed="PeriodChanged" Placeholder="Select Date" />
        @*<MudSelect T="string" @bind-Value="@period" SelectedValuesChanged="@(() => PeriodChanged())" Label="Transactions For" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" >
            <MudSelectItem Value="@("Today")" />
            <MudSelectItem Value="@("This Week")" />
            <MudSelectItem Value="@("This Month")" />
            <MudSelectItem Value="@("This Year")" />
            <MudSelectItem Value="@("All")" />
            
        </MudSelect>*@
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Source Account</MudTh>
        <MudTh>Destination Account</MudTh>        
        <MudTh>Description</MudTh>
        <MudTh>Amount</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Source Account">@context.SourceAccount</MudTd>
        <MudTd DataLabel="Destination Account">@context.DestinationAccount</MudTd>       
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Amount">@String.Format("{0:0,0.00}",context.Amount)</MudTd>
    </RowTemplate>
    <FooterContent>
        <MudTFootRow Class="bold-text">
          <MudTd></MudTd>
          <MudTd></MudTd>
          <MudTd></MudTd>
          <MudTd>Total: @String.Format("{0:0,0.00}",Elements.Sum(x=>x.Amount))</MudTd>
        </MudTFootRow>
    </FooterContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
  </MudTable>
</div>

@code {

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private string searchString2 = "";
    private TransferDto selectedItem1 = null;
    private TransferDto selectedItem2 = null;
    private HashSet<TransferDto> selectedItems = new HashSet<TransferDto>();
    private IEnumerable<TransferDto> Elements = new List<TransferDto>();
    public decimal TotalBalance { get; set; }
    DateTime? start = DateTime.Today;
    DateTime? end = DateTime.Today;

    string period = "Today";

    protected override async Task OnInitializedAsync()
    {
        accountEvents.AccountAdded += async (source, e) => await ReloadAccounts(source, e);
        await GetTransferReport();
    }

    private async Task GetTransferReport()
    {
        var response = await Http.PostAsJsonAsync($"/api/AccountTransaction/TransferReport", new AMS.Shared.DateRange());
        if (response.IsSuccessStatusCode)
        {
            Elements = await response.Content.ReadFromJsonAsync<List<TransferDto>>();
        }
    }
    private async Task App_StateChanged(ComponentBase Source)
    {
        if (Source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task ReloadAccounts(object source, EventArgs e)
    {
        await GetTransferReport();
        await App_StateChanged((ComponentBase)source);
    }

    private bool FilterFunc1(TransferDto element) => FilterFunc(element, searchString1);
    private bool FilterFunc2(TransferDto element) => FilterFunc(element, searchString2);

    private bool FilterFunc(TransferDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.SourceAccount.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.DestinationAccount.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void CalculateSummuries(string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
           TotalBalance = Elements.Sum(x => x.Amount);   
        }
        if (Elements.Select(x=>x.SourceAccount.ToUpper()).Contains(searchString.ToUpper()))
        {
            TotalBalance = Elements.Where(x => x.SourceAccount.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x=>x.Amount);
        }
        if (Elements.Select(x=>x.DestinationAccount.ToUpper()).Contains(searchString.ToUpper()))
        {
            TotalBalance = Elements.Where(x => x.SourceAccount.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x=>x.Amount);
        }
    }

    void IDisposable.Dispose()
    {
        accountEvents.AccountAdded -= async (source, e) => await ReloadAccounts(source, e);
    }

    async Task PeriodChanged()
    {
        var dateRange = new AMS.Shared.DateRange { StartDate = start, EndDate = end };
        var response = await Http.PostAsJsonAsync($"/api/AccountTransaction/TransferReport", dateRange);
        if (response.IsSuccessStatusCode)
        {
            Elements = await response.Content.ReadFromJsonAsync<List<TransferDto>>();
        }
    }
}
