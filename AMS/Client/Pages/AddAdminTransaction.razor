@page "/AddAdminTransaction"


@if(accounts == null)
{
    <div>Loading Data...</div>
}
else{
<div style="width: 450px;">
    <EditForm  @bind-IsValid="@success" @bind-Errors="@errors" Model="model" OnValidSubmit="OnValidSubmit">
          <DataAnnotationsValidator />
                <MudSelect T="string" Label="Select Source Account"  @bind-Value="model.AccountId"  AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
                    @foreach(var account in accounts)
                    {
                        <MudSelectItem T="string" Value="@account.AccountId">@account.AccountName</MudSelectItem>
                    }
                </MudSelect>

                 <MudSelect T="string" Label="Select Destination Account"  @bind-Value="model.SecondaryAccountId"  AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
                    @foreach(var acc in secondaryAccount)
                    {
                        <MudSelectItem T="string" Value="@acc.AccountId">@acc.AccountName</MudSelectItem>
                    }
                </MudSelect>

             <MudTextField T="string" Label="Description" Required="true" @bind-Value="model.Description" 
            RequiredError="Description is required!" For="@(() => model.Description)"/>

            <MudNumericField HideSpinButtons="true"  @bind-Value="model.Amount"
            Label="Amount" Variant="Variant.Text" />

            <ValidationSummary />
     <div style="margin-top:15px"  class="mud-card-actions">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
    </div>
    </EditForm>
</div>
}
@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    AccountTransaction model = new AccountTransaction();

    private IEnumerable<AccountDto> accounts { get; set; }
    private IEnumerable<AccountDto> secondaryAccount { get; set; }
    private IEnumerable<Agent> agents = new List<Agent>();
    bool success;
    string[] errors = { };

    private async void OnValidSubmit(EditContext context)
    {
        //HttpResponseMessage response = await Http.PostAsJsonAsync<AccountTransaction>("api/AccountTransaction", model);
        model.TransactionType = "Administrative";
        var response = await Http.PostAsJsonAsync("api/AdministrativeTransaction/AddTransaction", model);
        if(response.IsSuccessStatusCode)
        {
            model = new AccountTransaction();
            //var result = await response.Content.ReadFromJsonAsync<Result>();
            var result = await response.Content.ReadFromJsonAsync<AdministrativeTransactionDto>();
            Snackbar.Add("Transaction Saved", Severity.Success);
            await ModalInstance.CloseAsync(ModalResult.Ok(result));
        }
        else
        {
            model = new AccountTransaction();
            Snackbar.Add("Save Transaction Failed", Severity.Error);   
        }

    }

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetFromJsonAsync<IList<AccountDto>>("api/Account/GetAccounts");
        if(result is not null)
        {
            accounts = result;
        }
        else
        {
            accounts = new List<AccountDto>();
        }
        GetSecondaryAcc();
    }

    private async Task GetSecondaryAcc()
    {
        var result = await Http.GetFromJsonAsync<IList<AccountDto>>("api/Account/GetAccounts");
        if(result is not null)
        {
            secondaryAccount = result;
        }
        else
        {
            secondaryAccount = new List<AccountDto>();
        }
    }
}
