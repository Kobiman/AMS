@page "/AddPayout"
@attribute [Authorize(Roles ="Admin, Sales")]


<div style="width: 450px;">
        <EditForm @bind-IsValid="@success" @bind-Errors="@errors" Model="model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudDatePicker Editable="true" @bind-Date="model.EntryDate" Placeholder="Date"
                       RequiredError="Entry date is required!" For="@(() => model.EntryDate)" />


            <MudTextField T="string" Label="Agent" Required="true" @bind-Value="AgentName" ReadOnly="true" />

            <MudTextField T="string" Label="Area Of Operations"  @bind-Value="model.AreaOfOperations" />

            <MudSelect T="string" Label="Payment Method"  AnchorOrigin="Origin.BottomCenter"
                Variant="Variant.Outlined">
              <MudSelectItem T="string" Value="@("Cash")">Cash</MudSelectItem>
              <MudSelectItem T="string" Value="@("Cheque")">Cheque</MudSelectItem>
              <MudSelectItem T="string" Value="@("MoMo")">MoMo</MudSelectItem>
          </MudSelect>

          <MudTextField T="string" Label="Cheque No." Required="true" @bind-Value="model.ChequeNo"/>

            <MudTextField T="string" Label="Description" Required="true" @bind-Value="model.Description"
                      RequiredError="Description is required!" For="@(() => model.Description)" />

            <MudNumericField HideSpinButtons="true" @bind-Value="model.Amount"
                         Label="Amount" Variant="Variant.Text" />

             <MudTextField T="string" @bind-Value="model.TreatedBy" Label="Treated By" Variant="Variant.Text"
                    RequiredError="TreatedBy is a required field" For="@(() => model.TreatedBy)"/>
            <MudTextField T="string" @bind-Value="model.ApprovedBy" Label="Approved By" Variant="Variant.Text"
                    RequiredError="ApprovedBy is a required field" For="@(()=> model.ApprovedBy)"/>

            <ValidationSummary />
            <div style="margin-top:15px" class="mud-card-actions">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
            </div>
        </EditForm>
    </div>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    AddPayoutDto model = new AddPayoutDto();

    [Parameter] public string? SalesId { get; set; }
    [Parameter] public string? AgentId { get; set; }
    [Parameter] public string? AgentName { get; set; }
    [Parameter] public string? AreaOfOperations { get; set; }

    private IEnumerable<AccountDto> accounts { get; set; }
    private IEnumerable<Agent> agents = new List<Agent>();
    private IEnumerable<Game>? games { get; set; }
    bool success;
    string[] errors = { };

    private async void OnValidSubmit(EditContext context)
    {
        //model.SourceAccountType = accounts.FirstOrDefault(x => x.AccountId == model.SourceAccountId).Type;
        //model.DestinationAccountType = accounts.FirstOrDefault(x => x.AccountId == model.DestinationAccountId).Type;
        model.Type = "Payout";
        model.Amount = Math.Abs(model.Amount);

        var response = await Http.PostAsJsonAsync("api/AccountTransaction/Payout", model);
        if(response.IsSuccessStatusCode)
        {
            model = new AddPayoutDto();
            var result = await response.Content.ReadFromJsonAsync<AddPayoutDto>();
            await ModalInstance.CancelAsync();
            Snackbar.Add("Transaction Saved", Severity.Success);
            accountEvents.OnAccountAdded(this);
            await ModalInstance.CloseAsync(ModalResult.Ok(result));
        }
        else
        {
            model = new AddPayoutDto();
            await ModalInstance.CancelAsync();
            Snackbar.Add("Save Transaction Failed", Severity.Error);   
        }

    }

    protected override async Task OnInitializedAsync()
    {
        model.AgentId = AgentId;
        model.SalesId = SalesId;
        model.AreaOfOperations = AreaOfOperations;
    }
  
}
