@page "/AddPayout"


@if(accounts == null)
{
    <div>Loading Data...</div>
}
else{
<div style="width: 450px;">
    <EditForm  @bind-IsValid="@success" @bind-Errors="@errors" Model="model" OnValidSubmit="OnValidSubmit">
          <DataAnnotationsValidator />
                <MudSelect T="string" Label="Select Agent"  @bind-Value="model.AgentId"  AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
                    @foreach(var agent in agents)
                    {
                        <MudSelectItem T="string" Value="@agent.AgentId">@agent.Name</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect T="string" Label="Select Game"  @bind-Value="model.GameId"  AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
                    @foreach(var game in games)
                    {
                        <MudSelectItem T="string" Value="@game.Id">@game.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect T="string" Label="Select Source Account"  @bind-Value="model.SourceAccountId"  AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
                    @foreach(var account in accounts)
                    {
                        <MudSelectItem T="string" Value="@account.AccountId">@account.AccountName</MudSelectItem>
                    }
                </MudSelect>

                 <MudSelect T="string" Label="Select Destination Account"  @bind-Value="model.DestinationAccountId"  AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
                    @foreach(var acc in accounts)
                    {
                        <MudSelectItem T="string" Value="@acc.AccountId">@acc.AccountName</MudSelectItem>
                    }
                </MudSelect>


             <MudTextField T="string" Label="Description" Required="true" @bind-Value="model.Description" 
            RequiredError="Description is required!" For="@(() => model.Description)"/>

            <MudNumericField HideSpinButtons="true"  @bind-Value="model.Amount"
            Label="Amount" Variant="Variant.Text" />

            <ValidationSummary />
     <div style="margin-top:15px"  class="mud-card-actions">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
    </div>
    </EditForm>
</div>
}
@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    Payout model = new Payout();

    private IEnumerable<AccountDto> accounts { get; set; }
    private IEnumerable<Agent> agents = new List<Agent>();
    private IEnumerable<Game>? games { get; set; }
    bool success;
    string[] errors = { };

    private async void OnValidSubmit(EditContext context)
    {
        var response = await Http.PostAsJsonAsync("api/AccountTransaction/Payout", model);
        if(response.IsSuccessStatusCode)
        {
            model = new Payout();
            var result = await response.Content.ReadFromJsonAsync<AccountTransactionDto>();
            Snackbar.Add("Transaction Saved", Severity.Success);
            accountEvents.OnAccountAdded(this);
            await ModalInstance.CloseAsync(ModalResult.Ok(result));
        }
        else
        {
            model = new Payout();
            Snackbar.Add("Save Transaction Failed", Severity.Error);   
        }

    }

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetFromJsonAsync<IList<AccountDto>>("api/Account/GetAccounts");
        if(result is not null)
        {
            accounts = result;
        }
        else
        {
            accounts = new List<AccountDto>();
        }
        await GetAgents();
        await GetGames();
    }
     private async Task GetAgents()
    {
        var result = await Http.GetFromJsonAsync<List<Agent>>("api/Agent/GetAgents");
        if(result is not null)
        {
            agents = result;
        }
        else
        {
            agents = new List<Agent>();
        }
    }
    private async Task GetGames()
    {
        var result = await Http.GetFromJsonAsync<IList<Game>?>("api/Game/GetGames");
        if(result is not null)
        {
            games = result;
        }
        else
        {
            games = new List<Game>();
        }
    }
}
