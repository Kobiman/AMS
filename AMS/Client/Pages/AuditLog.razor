@page "/AuditLog"



<MudText Typo="Typo.h6">Audit Logs</MudText>
    <div style="margin-top:10px">
    <MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Virtualize="true" FixedHeader="true" Filter="new Func<Audit,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudDatePicker Label="From" Editable="true" @bind-Date="start" PickerClosed="PeriodChanged" Placeholder="Select Date" />
        <MudSpacer />
        <MudDatePicker Label="To" Editable="true" @bind-Date="end" PickerClosed="PeriodChanged" Placeholder="Select Date" />
        @*<MudSelect T="string" @bind-Value="@period" SelectedValuesChanged="@(() => PeriodChanged())" Label="Transactions For" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" >
            <MudSelectItem Value="@("Today")" />
            <MudSelectItem Value="@("This Week")" />
            <MudSelectItem Value="@("This Month")" />
            <MudSelectItem Value="@("This Year")" />
            <MudSelectItem Value="@("All")" />
            
        </MudSelect>*@

    </ToolBarContent>
    <HeaderContent>
        <MudTh>Date</MudTh>
        <MudTh>User Name</MudTh>
        <MudTh>Controller</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Date">@context.TimeAccessed</MudTd>
        <MudTd DataLabel="UserName">@context.UserName</MudTd>
        <MudTd DataLabel="Controller">@context.ControllerName</MudTd>
        <MudTd DataLabel="Action">@context.ActionName</MudTd>
    </RowTemplate>
    
    <PagerContent>
        <MudTablePager />
    </PagerContent>
  </MudTable>
</div>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private Audit selectedItem1 = null;
    DateTime? start = DateTime.Today;
    DateTime? end = DateTime.Today;

    private IEnumerable<Audit> Elements { get; set; } = new List<Audit>();


    protected override async Task OnInitializedAsync()
    {
        AMS.Shared.DateRange period = new AMS.Shared.DateRange { StartDate = DateTime.Today, EndDate = DateTime.Today.AddHours(24) };
        var response = await Http.PostAsJsonAsync($"/api/Audit/GetAuditLog", period);
        if (response.IsSuccessStatusCode)
        {
            Elements = await response.Content.ReadFromJsonAsync<List<Audit>>();
        }
    }


    private bool FilterFunc1(Audit element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Audit element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.ControllerName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    async Task PeriodChanged()
    {
        var period = new AMS.Shared.DateRange { StartDate = start, EndDate = end };
        var response = await Http.PostAsJsonAsync($"/api/Audit/GetAuditLog",period);
        if (response != null)
        {
            Elements = await response.Content.ReadFromJsonAsync<List<Audit>>();
        }
    }
}
