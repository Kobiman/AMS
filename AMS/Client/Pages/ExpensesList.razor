@page "/Expenses"
@implements IDisposable
@attribute [Authorize]
<MudText Typo="Typo.h6">Expenses</MudText>
<MudButton Variant="Variant.Filled" Height="200px" Color="Color.Primary" @onclick="@(() => Modal.Show<AddExpenses>("Add Expenses"))">Add Expenses</MudButton> 
<div style="margin-top:10px">
     <MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Virtualize="true" FixedHeader="true" Filter="new Func<GetExpenseDto,bool>(FilterFunc1)" 
        @bind-SelectedItem="selectedItem1" CustomHeader="true" CustomFooter="true">
    <ToolBarContent>
        
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" TextChanged ="@(()=>CalculateSummuries(@searchString1))" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Date</MudTh>
        <MudTh>Account Name</MudTh>
        <MudTh>Agent Name</MudTh>
        <MudTh>Amount</MudTh>
        <MudTh>Description</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="CreatedOn">@context.Date.ToShortDateString()</MudTd>
        <MudTd DataLabel="Balance">@context.AccountName</MudTd>
        <MudTd DataLabel="Balance">@context.AgentName</MudTd>
        <MudTd DataLabel="Name">@String.Format("{0:0,0.00}",context.Amount)</MudTd>
        <MudTd DataLabel="Type">@context.Description</MudTd>
    </RowTemplate>
    <FooterContent>
        <MudTFootRow Class="bold-text">
          <MudTd></MudTd>
          <MudTd></MudTd>
          <MudTd></MudTd>
          <MudTd>@String.Format("{0:0,0.00}",TotalAmount)</MudTd>
        </MudTFootRow>
    </FooterContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
  </MudTable>
</div>

@code {

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private string searchString2 = "";
    private GetExpenseDto selectedItem1 = null;
    private GetExpenseDto selectedItem2 = null;
    private HashSet<GetExpenseDto>? selectedItems = new HashSet<GetExpenseDto>();
    private IEnumerable<GetExpenseDto>? Elements = new List<GetExpenseDto>();
    private decimal TotalAmount;

    protected override async Task OnInitializedAsync()
    {
        accountEvents.AccountAdded += async (source, e) => await ReloadAccounts(source, e);
        await GetAccounts();
    }

    private async Task GetAccounts()
    {
        var result = await Http.GetFromJsonAsync<IList<GetExpenseDto>>("api/Expense/GetExpenses");
        if(result is not null)
        {
            Elements = result;
        }
        else
        {
            Elements = new List<GetExpenseDto>();
        }
        TotalAmount = Elements.Sum(x => x.Amount);
    }
    private async Task App_StateChanged(ComponentBase Source)
    {
        if (Source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task ReloadAccounts(object source, EventArgs e)
    {
        await GetAccounts();
        await App_StateChanged((ComponentBase)source);
    }

    private bool FilterFunc1(GetExpenseDto element) => FilterFunc(element, searchString1);
    private bool FilterFunc2(GetExpenseDto element) => FilterFunc(element, searchString2);

    private bool FilterFunc(GetExpenseDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.AccountName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Date.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void CalculateSummuries(string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            TotalAmount = Elements.Sum(x => x.Amount);   
        }
        if (Elements.Select(x=>x.AccountName.ToUpper()).Contains(searchString.ToUpper()))
        {
            TotalAmount = Elements.Where(x => x.AccountName.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x=>x.Amount);
        }
        if (Elements.Select(x=>x.Date.ToShortDateString().ToUpper()).Contains(searchString.ToUpper()))
        {
            TotalAmount = Elements.Where(x => x.Date.ToShortDateString().Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x=>x.Amount);
        }
    }

    void IDisposable.Dispose()
    {
        accountEvents.AccountAdded -= async (source, e) => await ReloadAccounts(source, e);
    }
}
