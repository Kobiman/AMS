@using System.Net.Http.Headers
@attribute [Authorize(Roles = "Admin, Payinregister")]

@if (accounts == null)
{
    <div>Loading Data...</div>
}
else
{
    <div style="width: 450px;">
        <EditForm @bind-IsValid="@success" @bind-Errors="@errors" Model="model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudDatePicker Editable="true" @bind-Date="model.EntryDate" Placeholder="Date"
                       RequiredError="Entry date is required!" For="@(() => model.EntryDate)" />


            <MudTextField T="string" Label="Agent" Required="true" @bind-Value="AgentName" ReadOnly="true" />

            <MudTextField T="string" Label="Area Of Operations" Required="true" @bind-Value="model.AreaOfOperations"/>

            <MudSelect T="string" Label="Payment Method" AnchorOrigin="Origin.BottomCenter"
                       Variant="Variant.Outlined">
                <MudSelectItem T="string" Value="@("Cash")">Cash</MudSelectItem>
                <MudSelectItem T="string" Value="@("Cheque")">Cheque</MudSelectItem>
                <MudSelectItem T="string" Value="@("MoMo")">MoMo</MudSelectItem>
            </MudSelect>

          <MudTextField T="string" Label="Cheque/MoMo Transaction ID" @bind-Value="model.ChequeNo"/>

            <MudTextField T="string" Label="Description" Required="true" @bind-Value="model.Description"
                      RequiredError="Description is required!" For="@(() => model.Description)" />

            <MudNumericField HideSpinButtons="true" @bind-Value="model.Amount"
                         Label="Amount" Variant="Variant.Text" />

            <MudTextField T="string" @bind-Value="model.ReceivedBy"
                          Label="Received By" Variant="Variant.Text" />
            <MudTextField T="string" @bind-Value="model.ReceivedFrom"
                          Label="Received From" Variant="Variant.Text" />
            <MudTextField T="string" @bind-Value="model.ReceiverPhone" Label="Payer Phone Number" Variant="Variant.Text"
                      RequiredError="Payer Phone is a required field" For="@(()=> model.ReceiverPhone)" />
           @*  <InputFile OnChange="@OnInputFileChange"/> *@
            <UploadFile OnChange="AssignFileUrl" />
            <ValidationSummary />
            <div style="margin-top:15px" class="mud-card-actions">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
            </div>
        </EditForm>
    </div>
}
@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    AddPayoutDto model = new AddPayoutDto();


    [Parameter] public string? SalesId { get; set; }
    [Parameter] public string? AgentId { get; set; }
    [Parameter] public string? AgentName { get; set; }
    [Parameter] public string? AreaOfOperations { get; set; }

    private IEnumerable<AccountDto> accounts { get; set; }
    private IEnumerable<Agent> agents = new List<Agent>();
    private IEnumerable<Game>? games { get; set; }
    bool success;
    string[] errors = { };

    private void AssignFileUrl(string imgUrl) => model.FilePath = imgUrl;

    private async void OnValidSubmit(EditContext context)
    {
        //model.SourceAccountType = accounts.FirstOrDefault(x => x.AccountId == model.SourceAccountId).Type;
        //model.DestinationAccountType = accounts.FirstOrDefault(x => x.AccountId == model.DestinationAccountId).Type;
        model.Type = "Payin";
        model.Amount = Math.Abs(model.Amount);

        var response = await Http.PostAsJsonAsync("api/AccountTransaction/Payout", model);
        if (response.IsSuccessStatusCode)
        {
            model = new AddPayoutDto();
            var result = await response.Content.ReadFromJsonAsync<AddPayoutDto>();
            await ModalInstance.CloseAsync();
            Snackbar.Add("Transaction Saved", Severity.Success);
            accountEvents.OnAccountAdded(this);
            StateHasChanged();
        }
        else
        {
            model = new AddPayoutDto();
            await ModalInstance.CloseAsync();
            Snackbar.Add("Save Transaction Failed", Severity.Error);
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetFromJsonAsync<IList<AccountDto>>("api/Account/GetAccounts");
        if (result is not null)
        {
            accounts = result;
        }
        else
        {
            accounts = new List<AccountDto>();
        }
        //await GetAgents();
        await GetGames();

        model.AgentId = AgentId;
        model.SalesId = SalesId;
        model.AreaOfOperations = AreaOfOperations;
    }
    private async Task GetAgents()
    {
        var result = await Http.GetFromJsonAsync<List<Agent>>("api/Agent/GetApprovedAgents");
        if (result is not null)
        {
            agents = result;
        }
        else
        {
            agents = new List<Agent>();
        }
    }
    private async Task GetGames()
    {
        var result = await Http.GetFromJsonAsync<IList<Game>?>("api/Game/GetGames");
        if (result is not null)
        {
            games = result;
        }
        else
        {
            games = new List<Game>();
        }
    }

    // IBrowserFile browserFile{ get; set; }
    // private long FileSize{ get; set; }
    // private string FileName{ get; set; }
    // private string FileType{ get; set; }
    // public DateTimeOffset LastModified { get; set; }
    // const int MAXFILE_SIZE = 5000 * 1024;

    // string imgUrl = "";
    // private async Task OnInputFileChange(InputFileChangeEventArgs e)
    // {
    //     browserFile = e.File;
    //     if(browserFile != null)
    //     {
    //         FileSize = browserFile.Size;
    //         FileName = browserFile.Name;
    //         FileType = browserFile.ContentType;
    //         LastModified = browserFile.LastModified;

    //         try
    //         {
    //             using var content = new MultipartFormDataContent();
    //             var fileStream = new StreamContent( browserFile.OpenReadStream(MAXFILE_SIZE));
    //             fileStream.Headers.ContentType = new MediaTypeHeaderValue(browserFile.ContentType);
    //             content.Add(content: fileStream, name: "file", browserFile.Name);

    //             var result = await Http.PostAsync("api/AccountTransaction/UploadFile", content);

    //             if (result.IsSuccessStatusCode)
    //             {
    //                 model.FilePath = await result.Content.ReadAsStringAsync();
    //             }
    //             else
    //             {
    //                 Snackbar.Add("Unable to load file", Severity.Warning);
    //             }

    //         }
    //         catch (Exception ex)
    //         {
    //             Snackbar.Add(ex.Message, Severity.Warning);
    //         }
    //     }
    //}
}
