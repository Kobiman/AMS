@page "/PayInRegisterList"
@inject MudBlazor.ISnackbar Snackbar

@*
    This list contains sales records where the sales amount is higher than the 
    wins amount(but not zero), and the sales record has been approved.
*@


<MudText>PayIn</MudText>
@*<button class="btn btn-secondary" onclick="window.print()">PRINT<i class="fa fa-print"></i></button>&nbsp;*@

<div style="margin-top:10px">
    <MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Virtualize="true" FixedHeader="true" Filter="new Func<SalesDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>

            <MudSpacer />
            @* <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" TextChanged ="@(()=>CalculateSummuries(@searchString1))"  IconSize="Size.Medium" Class="mt-0"></MudTextField> *@
            <MudSpacer />
            <MudDatePicker Label="From" Editable="true" @bind-Date="start" PickerClosed="PeriodChanged" Placeholder="Select Date" />
            <MudSpacer />
            <MudDatePicker Label="To" Editable="true" @bind-Date="end" PickerClosed="PeriodChanged" Placeholder="Select Date" />
            <MudSpacer />
            @*<MudSelect T="string" Label="Select Agent" @bind-Value="searchString1" AnchorOrigin="Origin.BottomCenter"
                       SelectedValuesChanged="@(()=>CalculateSummuries(@searchString1))" Variant="Variant.Outlined">
                <MudSelectItem Value="@("")">All</MudSelectItem>
                @foreach (var agent in Elements.DistinctBy(x => x.AgentName))
                {
                    <MudSelectItem T="string" Value="@agent.AgentName">@agent.AgentName</MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="string" Label="Select Game" @bind-Value="searchString1" AnchorOrigin="Origin.BottomCenter"
                       SelectedValuesChanged="@(()=>CalculateSummuries(@searchString1))" Variant="Variant.Outlined">



                <MudSelectItem Value="@("")">All</MudSelectItem>
                @foreach (var game in games)
                {
                    <MudSelectItem T="string" Value="@game.Name">@game.Name</MudSelectItem>
                }
            </MudSelect>*@

        </ToolBarContent>
        <HeaderContent>
            <MudTh>Entry Date</MudTh>
            <MudTh>Draw Date</MudTh>
            <MudTh>Agent</MudTh>
            <MudTh>Game</MudTh>
            <MudTh>Area of Operations</MudTh>
            <MudTh>No. of Sheets</MudTh>
            @*<MudTh>Sales</MudTh>*@
            <MudTh>Win Amount</MudTh>
            <MudTh>Treated By</MudTh>
            <MudTh>Description</MudTh>
            @* <MudTh>Approve</MudTh> *@

            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="EntryDate">@context.EntryDate</MudTd>
            <MudTd DataLabel="DrawDate">@context.DrawDate</MudTd>
            <MudTd DataLabel="Agent">@context.AgentName</MudTd>
            <MudTd DataLabel="Game">@context.GameName</MudTd>
            <MudTd DataLabel="Area of Operations">@context.AreaOfOperations</MudTd>
            <MudTd DataLabel="No. of Books">@context.NumberOfBooks</MudTd>
            @*<MudTd DataLabel="Sales">@String.Format("{0:0,0.00}", context.DailySales)</MudTd>*@
            <MudTd DataLabel="WinAmount">@String.Format("{0:0,0.00}", context.WinAmount)</MudTd>
            <MudTd DataLabel="Treated By">@context.TreatedBy</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            @* <MudFab @onclick="@(()=>ApproveTransaction(@context.Id))" Icon="@Icons.Material.Filled.CheckCircleOutline" Size="Size.Small" /> *@
            <MudTd DataLabel="">
                @if (!isAdmin)
                {
                    <MudButton Variant="Variant.Text" Size="Size.Small" Color="Color.Info" @onclick="@(() => {
                        var parameters = new ModalParameters();
                        parameters.Add("SalesId",@context.Id);
                        parameters.Add("AgentId",@context.AgentId);
                        parameters.Add("AgentName",context.AgentName);
                        parameters.Add("AreaOfOperations",context.AreaOfOperations);
                        Modal.Show<AddPayin>("Cash Pay-In",parameters);
                            })">Payin</MudButton>
                }
            </MudTd>



        </RowTemplate>
       @* <FooterContent>
            <MudTd>&nbsp</MudTd>
            <MudTd>&nbsp</MudTd>
            <MudTd>&nbsp</MudTd>
            <MudTd>&nbsp</MudTd>
            <MudTd>@String.Format("{0:0,0.00}", DailySales)</MudTd>
       
            <MudTd>&nbsp</MudTd>
        </FooterContent>*@
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public SalesDto Transaction { get; set; }
    SalesDto model = new SalesDto();

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private SalesDto selectedItem1 = null;
    private IEnumerable<AccountDto> accounts { get; set; }
    private IEnumerable<Agent> agents { get; set; } = new List<Agent>();
    private IEnumerable<Game>? games { get; set; }
    bool success;
    string[] errors = { };
    DateTime? start = DateTime.Today;
    DateTime? end = DateTime.Today;
    private List<SalesDto>? Elements { get; set; }
    private bool isAdmin = false;
    public int TotalNum { get; set; }

    private async void OnValidSubmit(EditContext context)
    {
        //HttpResponseMessage response = await Http.PostAsJsonAsync<AccountTransaction>("api/AccountTransaction", model);
        var response = await Http.PostAsJsonAsync("api/Sales/ApproveTransaction", model);
        if (response.IsSuccessStatusCode)
        {
            model = new SalesDto();
            //var result = await response.Content.ReadFromJsonAsync<Result>();
            var result = await response.Content.ReadFromJsonAsync<SalesDto>();
            Snackbar.Add("Transaction Approved", Severity.Success);
            await ModalInstance.CloseAsync(ModalResult.Ok(result));
        }
        else
        {
            model = new SalesDto();
            Snackbar.Add("Transaction Failed", Severity.Error);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAccounts();
        await GetAgents();
        await GetGames();
        await GetSalesRecords();
        // model = new SalesDto();
        // model.Id = Transaction.Id;
        // model.AccountId = Transaction.AccountId;
        // model.EntryDate = Transaction.EntryDate;
        // model.AgentId = Transaction.AgentId;
        // model.GameId = Transaction.GameId;
        // model.WinAmount = Transaction.WinAmount;
        // model.DailySales = Transaction.DailySales;
        // model.Description = Transaction.Description;

    }

    private async Task GetSalesRecords()
    {
        var dateRange = new AMS.Shared.DateRange { StartDate = start, EndDate = end };
        var response = await Http.PostAsJsonAsync($"/api/Sales/GetTransactions", dateRange);
        if (response.IsSuccessStatusCode)
        {
            var results = await response.Content.ReadFromJsonAsync<List<SalesDto>>();
            if (results != null)
            {
                Elements = results.Where(x => x.Approved == true)
                .Where(i => i.DailySales > i.WinAmount).ToList();
            }
            TotalNum = Elements.Count;
        }
    }

    async Task PeriodChanged()
    {
        var dateRange = new AMS.Shared.DateRange { StartDate = start, EndDate = end };
        var response = await Http.PostAsJsonAsync($"/api/Sales/GetTransactions", dateRange);
        if (response.IsSuccessStatusCode)
        {
            Elements = await response.Content.ReadFromJsonAsync<List<SalesDto>>();
            TotalNum = Elements.Count;
        }
    }

    async Task LoadAccounts()
    {
        var result = await Http.GetFromJsonAsync<IList<AccountDto>>("api/Account/GetAccounts");
        if (result is not null)
        {
            accounts = result;
        }
        else
        {
            accounts = new List<AccountDto>();
        }
    }
    private async Task GetAgents()
    {
        var result = await Http.GetFromJsonAsync<List<Agent>>("api/Agent/GetApprovedAgents");
        if (result is not null)
        {
            agents = result;
        }
        else
        {
            agents = new List<Agent>();
        }
    }
    private async Task GetGames()
    {
        var result = await Http.GetFromJsonAsync<IList<Game>?>("api/Game/GetGames");
        if (result is not null)
        {
            games = result;
        }
        else
        {
            games = new List<Game>();
        }
    }

    private bool FilterFunc1(SalesDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(SalesDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.AgentName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.GameName.Equals(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
