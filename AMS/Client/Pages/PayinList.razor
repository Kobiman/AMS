@page "/PayinReport"
@attribute [Authorize]

<MudText>PAY-IN REPORT</MudText>
<button class="btn btn-secondary" onclick="window.print()">PRINT<i class="fa fa-print"></i></button>
<MudButton Variant="Variant.Filled" Height="200px" Color="Color.Primary" @onclick="@(() => Modal.Show<AddPayin>("Cash Pay-In"))">Payin</MudButton>
    <div style="margin-top:10px">
    <MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Virtualize="true" FixedHeader="true" Filter="new Func<PayoutDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent> 
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" TextChanged ="@(()=>CalculateSummuries(@searchString1))" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudDatePicker Label="From" Editable="true" @bind-Date="start" PickerClosed="PeriodChanged" Placeholder="Select Date" />
        <MudSpacer />
        <MudDatePicker Label="To" Editable="true" @bind-Date="end" PickerClosed="PeriodChanged" Placeholder="Select Date" />
       @* <MudSelect T="string" @bind-Value="@period" SelectedValuesChanged="@(() => PeriodChanged())" Label="Transactions For" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" >
            <MudSelectItem Value="@("Today")" />
            <MudSelectItem Value="@("This Week")" />
            <MudSelectItem Value="@("This Month")" /> 
            <MudSelectItem Value="@("This Year")" />
            <MudSelectItem Value="@("All")" />
        </MudSelect>*@
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Date</MudTh>
        <MudTh>Agent</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Paid</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="EntryDate">@context.EntryDate</MudTd>
        <MudTd DataLabel="Agent">@context.Agent</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Amount">@String.Format("{0:0,0.00}",context.Amount)</MudTd>       
    </RowTemplate>
     <FooterContent>
        @*<MudTFootRow Class="bold-text">*@
          <MudTd></MudTd>
          <MudTd></MudTd>
          <MudTd></MudTd>
          <MudTd Class="bold-text">Total: @String.Format("{0:0,0.00}",TotalBalance)</MudTd>
        @*</MudTFootRow>*@
    </FooterContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
  </MudTable>
</div>


@*<MudCard Outlined="true">
    <MudCardContent>
        <MudText Typo="Typo.h6">Summary</MudText>
        <MudSpacer />
        <MudText Typo="Typo.body2" >Total Transactions: @TotalNum</MudText>
        <MudText Typo="Typo.body2" >Total Amount:   GH₵ @TotalBalance</MudText>
    </MudCardContent>
</MudCard>*@

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private PayoutDto selectedItem1 = null;
    DateTime? start = DateTime.Today;
    DateTime? end = DateTime.Today;

    private IEnumerable<PayoutDto> Elements = new List<PayoutDto>();
    string period = "Today";

    public int TotalNum { get; set; }
    public decimal TotalCredit { get; set; }
    public decimal TotalDebit { get; set; }
    public decimal TotalBalance { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.PostAsJsonAsync($"/api/AccountTransaction/PayinReport", new AMS.Shared.DateRange());
        if (response.IsSuccessStatusCode)
        {
            Elements = await response.Content.ReadFromJsonAsync<List<PayoutDto>>();

        }
        TotalBalance = Elements.Sum(x => x.Amount);
        TotalNum = Elements.Count();
    }


    private bool FilterFunc1(PayoutDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(PayoutDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        //if (element.Account.AccountName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;

        return false;
    }

    private void CalculateSummuries(string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
           TotalBalance = Elements.Sum(x => x.Amount);   
        }
        if (Elements.Select(x=>x.Description.ToUpper()).Contains(searchString.ToUpper()))
        {
            TotalBalance = Elements.Where(x => x.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x=>x.Amount);
        }
    }


    async Task PeriodChanged()
    {
        var dateRange = new AMS.Shared.DateRange { StartDate = start, EndDate = end };
        var response = await Http.PostAsJsonAsync($"/api/AccountTransaction/PayinReport", dateRange);
        if (response.IsSuccessStatusCode)
        {
            Elements = await response.Content.ReadFromJsonAsync<List<PayoutDto>>();
            
        }
        TotalBalance = Elements.Sum(x => x.Amount);
        TotalNum = Elements.Count();
    }
}
