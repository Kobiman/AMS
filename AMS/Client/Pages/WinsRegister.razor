@page "/WinsRegister"
@using System.Text.Json


@attribute [Authorize(Roles = "Admin, Winsregister")]


<div style="width: 450px;">
    <EditForm @bind-IsValid="@success" @bind-Errors="@errors" Model="model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudDatePicker Editable="true" @bind-Date="model.EntryDate" Placeholder="Entry Date" ReadOnly="false" />
        <MudDatePicker Editable="false" @bind-Date="model.DrawDate" Placeholder="Draw Date" ReadOnly="true" />

        @* <MudTextField T="string" Label="Account" Required="true" @bind-Value="model.AccountName"
        RequiredError="Account is required!" For="@(() => model.AccountName)" ReadOnly="true" /> *@

        <MudTextField T="string" Label="Agent" Required="true" @bind-Value="model.AgentName"
                      RequiredError="Agent is required!" For="@(() => model.AgentName)" ReadOnly="true" />

        <MudTextField T="string" Label="Game" Required="true" @bind-Value="model.GameName"
                      RequiredError="Game is required!" For="@(() => model.GameName)" ReadOnly="true" />

       <MudSelect T="string" Label="Description" Required="true"  @bind-Value="model.Description"  AnchorOrigin="Origin.BottomCenter"
                Variant="Variant.Outlined">
              <MudSelectItem T="string" Value="@("Oversight Wins")">Oversight Wins</MudSelectItem>
              <MudSelectItem T="string" Value="@("Late Wins")">Late Wins</MudSelectItem>
              <MudSelectItem T="string" Value="@("Daily Wins")">Daily Wins</MudSelectItem>
          </MudSelect>

        <MudTextField T="string" Label="Area of Operations" Required="true" @bind-Value="model.AreaOfOperations"
                      RequiredError="Area of operations is required!" For="@(() => model.AreaOfOperations)" ReadOnly="true" />

        <MudTextField T="int" Label="Number of Sheets" Required="true" @bind-Value="model.NumberOfSheets"
                      RequiredError="Number of books is required!" For="@(() => model.NumberOfSheets)"
                      TextChanged="@(()=>GenerateSheets())" />

        <MudGrid style="min-height:18px;max-height:200px;overflow: auto;">
            @foreach (var s in sheets)
            {
                var sheetNo = $"Sheet {s.SheetNo}";
                <MudItem xs="4">
                  <MudNumericField HideSpinButtons="true" @bind-Value="s.Amount"
                                     Label="@sheetNo" Variant="Variant.Text"
                                     TextChanged="@(()=>CalculateWinsAmount())" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField T="string" @bind-Value="s.TreatedBy" Label="Treated By" Variant="Variant.Text" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField T="string" @bind-Value="s.ApprovedBy" Label="Approved By" Variant="Variant.Text" />
                </MudItem>
            }
        </MudGrid>

        <MudNumericField HideSpinButtons="true" @bind-Value="model.WinAmount"
                         Label="Wins Amount" Variant="Variant.Text" ReadOnly="true" />





        <ValidationSummary />
        <div style="margin-top:15px" class="mud-card-actions">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
        </div>
    </EditForm>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public SalesDto model { get; set; } = new SalesDto();

    private IEnumerable<AccountDto> accounts { get; set; }
    private IEnumerable<Agent> agents = new List<Agent>();
    private IList<Sheet> sheets;
    private IEnumerable<Game>? games { get; set; }
    bool success;
    string[] errors = { };

    private async void OnValidSubmit(EditContext context)
    {
        //HttpResponseMessage response = await Http.PostAsJsonAsync<AccountTransaction>("api/AccountTransaction", model);
        //model.TransactionType = "Agent";
        model.Sheet = JsonSerializer.Serialize(sheets);
        var response = await Http.PostAsJsonAsync("api/Sales/EditTransaction", model);

        if (response.IsSuccessStatusCode)
        {
            model = new SalesDto();
            //var result = await response.Content.ReadFromJsonAsync<Result>();
            var result = await response.Content.ReadFromJsonAsync<SalesDto>();
            Snackbar.Add("Transaction Saved", Severity.Success);
            await ModalInstance.CloseAsync(ModalResult.Ok(result));
        }
        else
        {
            model = new SalesDto();
            Snackbar.Add("Save Transaction Failed", Severity.Error);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetFromJsonAsync<IList<AccountDto>>("api/Account/GetAccounts");
        if (result is not null)
        {
            accounts = result.Where(x => x.Type == AccountTypes.Revenue);
        }
        else
        {
            accounts = new List<AccountDto>();
        }
        await GetAgents();
        await GetGames();
        model.Description = "";
        GenerateSheets();
    }

    public void GenerateSheets()
    {
        sheets = new List<Sheet>();
        for (int i = 0; i < model.NumberOfSheets; i++)
        {
            sheets.Add(new Sheet { SheetNo = (i + 1).ToString() });
        }
    }

    private async Task GetAgents()
    {
        var r = await Http.GetFromJsonAsync<List<Agent>>("api/Agent/GetAgents");
        var result = r.Where(x => x.Approved);
        if (result is not null)
        {
            agents = result;
        }
        else
        {
            agents = new List<Agent>();
        }
    }
    private async Task GetGames()
    {
        var result = await Http.GetFromJsonAsync<IList<Game>?>("api/Game/GetGames");
        if (result is not null)
        {
            games = result;
        }
        else
        {
            games = new List<Game>();
        }
    }

    private void CalculateWinsAmount()
    {
        model.WinAmount = sheets.Sum(x=>x.Amount);
    }


}

