@page "/AccountTransactions"

<MudText Typo="Typo.h6">Account Transactions</MudText>
<MudButton Variant="Variant.Filled" Height="200px" Color="Color.Primary" @onclick="@(() => Modal.Show<AddAccountTransaction>("Add Transaction"))">Add Transaction</MudButton> 
    <div style="margin-top:10px">
    <MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Virtualize="true" FixedHeader="true" Filter="new Func<AccountTransactionDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>CreatedOn</MudTh>
        <MudTh>Account</MudTh>
        <MudTh>Amount</MudTh>
        <MudTh>Credit</MudTh>
        <MudTh>Debit</MudTh>
        <MudTh>Description</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="CreatedOn">@context.TransactionDate</MudTd>
        <MudTd DataLabel="Account">@context.AccountName</MudTd>
        <MudTd DataLabel="Amount">@context.Amount</MudTd>
        <MudTd DataLabel="Credit">@context.Credit</MudTd>
        <MudTd DataLabel="Debit">@context.Debit</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
  </MudTable>
</div>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private AccountTransactionDto selectedItem1 = null;

    private IEnumerable<AccountTransactionDto> Elements { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Elements = await Http.GetFromJsonAsync<IList<AccountTransactionDto>>("/api/AccountTransaction/GetTransactions");
    }


    private bool FilterFunc1(AccountTransactionDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(AccountTransactionDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        //if (element.Account.AccountName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;

        return false;
    }
}
