@page "/AgentsTransactions"

<MudText Typo="Typo.h6">Agent Transactions</MudText>
    <MudButton Variant="Variant.Filled" Height="200px" Color="Color.Primary" @onclick="ShowModal">Add Transaction</MudButton>
    <div style="margin-top:10px">
    <MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Virtualize="true" FixedHeader="true" Filter="new Func<AgentsTransactionDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudSelect T="string" @bind-Value="@period" SelectedValuesChanged="@(() => PeriodChanged())" Label="Transactions For" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" >
            <MudSelectItem Value="@("Today")" />
            <MudSelectItem Value="@("This Week")" />
            <MudSelectItem Value="@("This Month")" />
            
        </MudSelect>

    </ToolBarContent>
    <HeaderContent>
        <MudTh>CreatedOn</MudTh>
        <MudTh>Account</MudTh>
        <MudTh>Agent</MudTh>
        <MudTh>Sales</MudTh>
        <MudTh>Paid</MudTh>
        <MudTh>Outstanding Balance</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="CreatedOn">@context.TransactionDate</MudTd>
        <MudTd DataLabel="Account">@context.AccountName</MudTd>
        <MudTd DataLabel="Agent">@context.Agent</MudTd>
        <MudTd DataLabel="Sales">@context.DailySales</MudTd>
        <MudTd DataLabel="Amount">@context.Amount</MudTd>       
        <MudTd DataLabel="Sales">@context.OutstandingBalance</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>EditTransaction(@context.Id))" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" />
            <MudFab @onclick="@(()=>DeleteTransaction(@context.Id))" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
        </MudTd>
    </RowTemplate>
    
    <PagerContent>
        <MudTablePager />
    </PagerContent>
  </MudTable>
</div>


<MudCard Outlined="true">
    <MudCardContent>
        <MudText Typo="Typo.h6">Summary</MudText>
        <MudSpacer />
        <MudText Typo="Typo.body2" >Total Transactions: @TotalNum</MudText>
        <MudText Typo="Typo.body2" >Total Amount:   GH₵ @TotalBalance</MudText>
    </MudCardContent>
</MudCard>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private AgentsTransactionDto selectedItem1 = null;

    private List<AgentsTransactionDto>? Elements { get; set; }
    string period = "Today";

    public int TotalNum { get; set; }
    public decimal TotalCredit { get; set; }
    public decimal TotalDebit { get; set; }
    public decimal TotalBalance { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Elements = await Http.GetFromJsonAsync<List<AgentsTransactionDto>>($"/api/AgentsTransaction/GetTransactions/{period}");
        TotalBalance = Elements.Sum(x => x.Amount);
        TotalNum = Elements.Count;
    }


    private bool FilterFunc1(AgentsTransactionDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(AgentsTransactionDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        //if (element.Account.AccountName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;

        return false;
    }

    async Task EditTransaction(string TransactionId)
    {
        AgentsTransactionDto transaction = Elements.FirstOrDefault(x => x.Id == TransactionId);
        if(transaction != null)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(EditAgentsTransaction.Transaction), transaction);

            var transactionModal = Modal.Show<EditAgentsTransaction>("Edit Agents Transaction", parameters);
            var result = await transactionModal.Result;
            if(result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
            }
            else
            {
                AgentsTransactionDto updatedTransaction = (AgentsTransactionDto)result.Data;
                var originalTransaction = Elements.FirstOrDefault(t => t.Id == updatedTransaction.Id);
                if(originalTransaction != null)
                {
                    originalTransaction.AccountId = updatedTransaction.AccountId;
                    originalTransaction.AccountName = updatedTransaction.AccountName;
                    originalTransaction.AgentId = updatedTransaction.AgentId;
                    originalTransaction.Agent = updatedTransaction.Agent;
                    originalTransaction.Amount = updatedTransaction.Amount;
                    originalTransaction.DailySales = updatedTransaction.DailySales;
                    originalTransaction.OutstandingBalance = updatedTransaction.OutstandingBalance;
                    originalTransaction.Description = updatedTransaction.Description;
                    StateHasChanged();
                }         
            }
        }
    }

    async Task DeleteTransaction(string Id)
    {
        AgentsTransactionDto transaction = Elements.FirstOrDefault(x => x.Id == Id);
        if(transaction != null)
        {
            var transactionModal = Modal.Show<ConfirmDelete>("Confirm Delete");
            var result = await transactionModal.Result;
            if(result.Cancelled == false)
            {
                var response = await Http.DeleteAsync($"/api/AgentsTransaction/{Id}");
                if(response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Deletion Was Successful", Severity.Info);
                    Elements.Remove(transaction);
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add("Deletion Failed", Severity.Error);   
                }
            }
        }
    }

    async Task ShowModal()
    {
        var transactionModal = Modal.Show<AddAgentsTransaction>("Add Agent Transaction");
        var result = await transactionModal.Result;
        if(result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            Console.WriteLine(result.Data);
            Elements.Add((AgentsTransactionDto) result.Data);
            StateHasChanged();
        }
    }

    async Task PeriodChanged()
    {
        Elements = await Http.GetFromJsonAsync<List<AgentsTransactionDto>>($"/api/AgentsTransaction/GetTransactions/{period}");
        TotalBalance = Elements.Sum(x => x.Amount);
        TotalNum = Elements.Count;
    }
}
