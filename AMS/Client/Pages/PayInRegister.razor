@page "/PayInRegister"

@attribute [Authorize(Roles = "Admin, Sales")]

@if (accounts == null)
{
    <div>Loading Data...</div>
}
else
{
<div style="width: 450px;">
    <h4>PAY IN REGISTER</h4>
    <EditForm @bind-IsValid="@success" @bind-Errors="@errors" Model="model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudDatePicker Editable="true" @bind-Date="model.EntryDate" Placeholder="Date"
                       RequiredError="Entry date is required!" For="@(() => model.EntryDate)" />
        @*<MudDatePicker Editable="true" @bind-Date="model.DrawDate" Placeholder="Draw Date"
        RequiredError="Draw date is required!" For="@(() => model.DrawDate)" />*@

        @* <MudSelect T="string" Label="Select Agent" @bind-Value="model.AgentId" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
            @foreach (var agent in agents)
            {
                <MudSelectItem T="string" Value="@agent.AgentId">@agent.Name</MudSelectItem>
            }
        </MudSelect> *@

        <MudSelect T="string" Label="Select Agent"  @bind-Value="model.AgentId"  AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
            @foreach(var agent in agents)
            {
                <MudSelectItem T="string" Value="@agent.AgentId">@agent.Name</MudSelectItem>
            }
        </MudSelect>
        <MudTextField T="string" Label="Area of Operations" Required="true" @bind-Value="AgentName" />
        <MudTextField T="string" Label="Cash/Cheque" Required="true" @bind-Value="AgentName"  />
        <MudTextField T="string" Label="Cheque No." Required="true" @bind-Value="AgentName"/>
        <MudNumericField HideSpinButtons="true" @bind-Value="model.Amount"
                         Label="Amount" Variant="Variant.Text" />
        @*<MudNumericField HideSpinButtons="true" @bind-Value="model.Amount"
                         Label="Entered By" Variant="Variant.Text" />*@
        <MudTextField T="string" Label="Description" Required="true" @bind-Value="model.Description"
                      RequiredError="Description is required!" For="@(() => model.Description)" />



        <ValidationSummary />
        <div style="margin-top:15px" class="mud-card-actions">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
        </div>
    </EditForm>
</div>
}
@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    AddPayoutDto model = new AddPayoutDto();


    [Parameter] public string? SalesId { get; set; }
    [Parameter] public string? AgentId { get; set; }
    [Parameter] public string? AgentName { get; set; }

    private IEnumerable<AccountDto> accounts { get; set; }
    private IEnumerable<AgentDto> agents = new List<AgentDto>();
    private IEnumerable<Game>? games { get; set; }
    bool success;
    string[] errors = { };

    private async void OnValidSubmit(EditContext context)
    {
        //model.SourceAccountType = accounts.FirstOrDefault(x => x.AccountId == model.SourceAccountId).Type;
        //model.DestinationAccountType = accounts.FirstOrDefault(x => x.AccountId == model.DestinationAccountId).Type;
        model.Type = "Payin";
        model.Amount = Math.Abs(model.Amount);

        var response = await Http.PostAsJsonAsync("api/AccountTransaction/Payout", model);
        if (response.IsSuccessStatusCode)
        {
            model = new AddPayoutDto();
            var result = await response.Content.ReadFromJsonAsync<AddPayoutDto>();
            Snackbar.Add("Transaction Saved", Severity.Success);
            accountEvents.OnAccountAdded(this);
            await ModalInstance.CloseAsync(ModalResult.Ok(result));
        }
        else
        {
            model = new AddPayoutDto();
            Snackbar.Add("Save Transaction Failed", Severity.Error);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetFromJsonAsync<IList<AccountDto>>("api/Account/GetAccounts");
        if (result is not null)
        {
            accounts = result;
        }
        else
        {
            accounts = new List<AccountDto>();
        }
        //await GetAgents();
        await GetGames();

        model.AgentId = AgentId;
        model.SalesId = SalesId;
    }
    private async Task GetAgents()
    {
        var result = await Http.GetFromJsonAsync<List<AgentDto>>("api/Agent/GetApprovedAgents");
        if (result is not null)
        {
            agents = result;
        }
        else
        {
            agents = new List<AgentDto>();
        }
    }
    private async Task GetGames()
    {
        var result = await Http.GetFromJsonAsync<IList<Game>?>("api/Game/GetGames");
        if (result is not null)
        {
            games = result;
        }
        else
        {
            games = new List<Game>();
        }
    }
}
