@page "/EditUserRole"
@inject MudBlazor.ISnackbar Snackbar
@attribute [Authorize(Roles = "Admin")]


<div style="width: 450px;">
    <EditForm  @bind-IsValid="@success" @bind-Errors="@errors" Model="model" OnValidSubmit="OnValidSubmit">
          <DataAnnotationsValidator />

             <MudTextField T="string" Required="true" @bind-Value="model.Email" 
            RequiredError="Description is required!" For="@(() => model.Email)" ReadOnly="true" Variant="Variant.Filled"/>

        <MudSelect T="int" Label="Select Location" @bind-Value="model.LocationId"   AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
                 @foreach(var loc in locations)
                 {
                     <MudSelectItem T="int" Value="@loc.Id">@loc.LocationName (@loc.LocationABV)</MudSelectItem>
                 }
        </MudSelect>


           @*  <MudSelect T="string" Label="Select Role"  @bind-Value="model.Role"  AnchorOrigin="Origin.BottomCenter"
                Variant="Variant.Outlined">
              <MudSelectItem T="string" Value="@("Saleregister")">Sale Register</MudSelectItem>
              <MudSelectItem T="string" Value="@("Winsregister")">Wins Register</MudSelectItem>
              <MudSelectItem T="string" Value="@("Payinregister")">Payin Register</MudSelectItem>
              <MudSelectItem T="string" Value="@("Payoutregister")">Payout Register</MudSelectItem>
              <MudSelectItem T="string" Value="@("Admin")">Admin</MudSelectItem>
              @*<MudSelectItem T="string" Value="@("Agent")">Agent</MudSelectItem>
            </MudSelect> *@
            <div>
                <MudText Typo="Typo.h6">Roles</MudText>
                @* <MudCheckBox T="bool" @bind-Value="Saleregister" Label="Sales Register" Color="Color.Primary"></MudCheckBox>
                <MudCheckBox T="bool" @bind-Value="Winsregister" Label="Wins Register" Color="Color.Primary"></MudCheckBox>
                <MudCheckBox T="bool" @bind-Value="Payoutregister" Label="Payout Register" Color="Color.Primary"></MudCheckBox>
                <MudCheckBox T="bool" @bind-Value="Payinregister" Label="Payin Register" Color="Color.Primary"></MudCheckBox>
                <MudCheckBox T="bool" @bind-Value="Admin" Label="Admin" Color="Color.Primary"></MudCheckBox> *@
                <div class="form-check">
                <div><label><input type="checkbox" class="form-check-input" @bind-value="@Saleregister" /> &nbsp; Sales Register</label></div>
                <div><label><input type="checkbox" class="form-check-input" @bind-value="@Winsregister" /> &nbsp; Wins Register</label></div>
                <div><label><input type="checkbox" class="form-check-input" @bind-value="@Payoutregister" /> &nbsp; Payout Register</label></div>
                <div><label><input type="checkbox" class="form-check-input" @bind-value="@Payinregister" /> &nbsp; Payin Register</label></div>
                <div><label><input type="checkbox" class="form-check-input" @bind-value="@Admin" /> &nbsp; Admin</label></div>
                </div>
            </div>
            



            <ValidationSummary />
     <div style="margin-top:15px"  class="mud-card-actions">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
    </div>
    </EditForm>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public UserDto User { get; set; }
    private IList<Location> locations = new List<Location>();
    UserDto model = new UserDto();
    private List<string> Userroles = new List<string>();

    //
    private bool Saleregister { get; set; }
    private bool Winsregister { get; set; }
    private bool Payinregister { get; set; }
    private bool Payoutregister { get; set; }
    private bool Admin { get; set; }



    bool success;
    string[] errors = { };

    private async void OnValidSubmit(EditContext context)
    {
        if (Saleregister) { Userroles.Add("Saleregister"); }
        if (Winsregister) { Userroles.Add("Winsregister"); }
        if (Payinregister) { Userroles.Add("Payinregister"); }
        if (Payoutregister) { Userroles.Add("Payoutregister"); }
        if (Admin) { Userroles.Add("Admin"); }

        model.Roles = Userroles;

        var response = await Http.PutAsJsonAsync("api/Auth", model);
        if(response.IsSuccessStatusCode)
        {
            model = new UserDto();
            var result = await response.Content.ReadFromJsonAsync<Result<UserDto>>();
            Snackbar.Add("User Updated", Severity.Success);
            await ModalInstance.CloseAsync(ModalResult.Ok(result.Value));
        }
        else
        {
            model = new UserDto();
            Snackbar.Add("Update Failed", Severity.Error);   
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadLocations();
        model = new UserDto();
        model.Id = User.Id;
        model.Email = User.Email;
        //model.Role = User.Role;
        model.StaffId = User.StaffId;
        model.LocationId = User.LocationId;
        model.Roles = User.Roles;
        if (model.Roles.Contains("Saleregister"))
        {
            Saleregister = true;
        }
        if (model.Roles.Contains("Winsregister"))
        {
            Winsregister = true;
        }
        if (model.Roles.Contains("Payinregister"))
        {
            Payinregister = true;
        }
        if (model.Roles.Contains("Payoutregister"))
        {
            Payoutregister = true;
        }
        if (model.Roles.Contains("Admin"))
        {
            Admin = true;
        }
        StateHasChanged();
    }
    private async Task LoadLocations()
    {
         var result = await Http.GetFromJsonAsync<List<Location>>($"api/Location");
        if(result is not null)
        {
            locations = result;
        }
        else
        {
            locations = new List<Location>();
        }
    }
}
