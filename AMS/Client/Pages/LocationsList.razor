@page "/Locations"
@attribute [Authorize(Roles = "Admin, Addlocation")]

<MudText Typo="Typo.h6">Locations</MudText>
<MudButton Variant="Variant.Filled" Height="200px" Color="Color.Primary" @onclick="ShowModal">Add Location</MudButton> 
    <div style="margin-top:10px">
    <MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Virtualize="true" FixedHeader="true" CustomHeader="true" CustomFooter="true">
    <HeaderContent>
        <MudTh>Location Name</MudTh>
        <MudTh>Location Abbreviation</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Location Name">@context.LocationName</MudTd>
        <MudTd DataLabel="Location Abbreviation">@context.LocationABV</MudTd>
    </RowTemplate>
</MudTable>

</div>

@code {

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;

    private List<Location>? Elements { get; set; }

    protected override async Task OnInitializedAsync()
    {
       var result = await Http.GetFromJsonAsync<List<Location>>($"api/Location");
        if(result is not null)
        {
            Elements = result;
        }
        else
        {
            Elements = new List<Location>();
        }
    }

    async Task ShowModal()
    {
        var gameModal = Modal.Show<AddLocation>("Add New Location");
        var result = await gameModal.Result;
        if(result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            Elements.Add((Location) result.Data);
            StateHasChanged();
        }
    }

}
