@page "/AgentExpensesList"
@inject MudBlazor.ISnackbar Snackbar

<MudText>Expenses</MudText>


<div style="margin-top:10px">
    <MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Virtualize="true" FixedHeader="true" Filter="new Func<SalesDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>

            <MudSpacer />
            <MudSpacer />
            <MudDatePicker Label="From" Editable="true" @bind-Date="start" PickerClosed="PeriodChanged" Placeholder="Select Date" />
            <MudSpacer />
            <MudDatePicker Label="To" Editable="true" @bind-Date="end" PickerClosed="PeriodChanged" Placeholder="Select Date" />
            <MudSpacer />

        </ToolBarContent>
        <HeaderContent>
            <MudTh>Entry Date</MudTh>
            <MudTh>Draw Date</MudTh>
            @* <MudTh>Agent</MudTh> *@
            <MudTh>Game</MudTh>
            <MudTh>Area of Operations</MudTh>
            <MudTh>No. of Sheets</MudTh>
            <MudTh>Win Amount</MudTh>
            <MudTh>Treated By</MudTh>
            <MudTh>Description</MudTh>


            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="EntryDate">@context.EntryDate</MudTd>
            <MudTd DataLabel="DrawDate">@context.DrawDate</MudTd>
            @* <MudTd DataLabel="Agent">@context.AgentName</MudTd> *@
            <MudTd DataLabel="Game">@context.GameName</MudTd>
            <MudTd DataLabel="Area of Operations">@context.AreaOfOperations</MudTd>
            <MudTd DataLabel="No. of Books">@context.NumberOfBooks</MudTd>

            <MudTd DataLabel="WinAmount">@String.Format("{0:0,0.00}", context.WinAmount)</MudTd>
            <MudTd DataLabel="Treated By">@context.SalesTreatedBy</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="">
                @if (!isAdmin)
                {
                    <MudButton Variant="Variant.Text" Size="Size.Small" Color="Color.Info" @onclick="@(() => {
                        var parameters = new ModalParameters();
                        parameters.Add("SalesId",@context.SalesId);
                        parameters.Add("AgentId",@context.AgentId);
                        parameters.Add("AgentName",context.AgentName);
                        Modal.Show<AddAgentExpense>("Add Expense",parameters);
                            })">Expense</MudButton>
                }
            </MudTd>



        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public SalesDto Transaction { get; set; }
    SalesDto model = new SalesDto();

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private SalesDto selectedItem1 = null;
    private IEnumerable<AccountDto> accounts { get; set; }
    private IEnumerable<Agent> agents { get; set; } = new List<Agent>();
    private IEnumerable<Game>? games { get; set; }
    bool success;
    string[] errors = { };
    DateTime? start = DateTime.Today;
    DateTime? end = DateTime.Today;
    private List<SalesDto>? Elements { get; set; }
    private bool isAdmin = false;
    public int TotalNum { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await GetSalesRecords();
    }

    private async Task GetSalesRecords()
    {
        var dateRange = new AMS.Shared.DateRange { StartDate = start, EndDate = end };
        var response = await Http.PostAsJsonAsync($"/api/Sales/GetSalesReport", dateRange);
        if (response.IsSuccessStatusCode)
        {
            var results = await response.Content.ReadFromJsonAsync<List<SalesDto>>();
            if (results != null)
            {
                Elements = results.ToList();
            }
            TotalNum = Elements.Count;
        }
    }

    async Task PeriodChanged()
    {
        var dateRange = new AMS.Shared.DateRange { StartDate = start, EndDate = end };
        var response = await Http.PostAsJsonAsync($"/api/Sales/GetSalesReport", dateRange);
        if (response.IsSuccessStatusCode)
        {
            var results = await response.Content.ReadFromJsonAsync<List<SalesDto>>();
            if (results != null)
            {
                Elements = results.ToList();
            }
            TotalNum = Elements.Count;
        }
    }



    private bool FilterFunc1(SalesDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(SalesDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.AgentName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.GameName.Equals(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
