@using System.Text.RegularExpressions
@page "/AddExpenses"
<div style="width: 450px;">
    <EditForm  @bind-IsValid="@success" @bind-Errors="@errors" Model="@model" OnValidSubmit="OnValidSubmit">
          <DataAnnotationsValidator />
           <MudSelect T="string" Label="Select Account"  @bind-Value="model.AccountId"  AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined"
                 RequiredError="Account is required!" For="@(() => model.AccountId)">
                    @foreach(var account in accounts)
                    {
                        <MudSelectItem T="string" Value="@account.AccountId">@account.AccountName</MudSelectItem>
                    }
                </MudSelect>
            <MudTextField T="string" Label="Description" Required="true" @bind-Value="model.Description" 
            RequiredError="Description is required!" For="@(() => model.Description)"/>
          <MudNumericField HideSpinButtons="true" Label="Amount" Required="true" @bind-Value="model.Amount" 
            RequiredError="Amount is required!" For="@(() => model.Amount)"/>  
     <div style="margin-top:15px"  class="mud-card-actions">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
    </div>
    </EditForm>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    private IEnumerable<AccountDto> accounts { get; set; } = new List<AccountDto>();
    bool success;
    AddExpenseDto model = new AddExpenseDto();
    string[] errors = { };

    private async void OnValidSubmit(EditContext context)
    {
        model.AccountType = accounts.FirstOrDefault(x => x.AccountId == model.AccountId).Type;
        var response = await Http.PostAsJsonAsync("api/Expense/AddExpense",context.Model);
        var content = await response.Content.ReadFromJsonAsync<Result>();
        if (content is not null && content.IsSucessful)
        {
            Account model = new Account();
            await ModalInstance.CloseAsync();
            Snackbar.Add(content.Message, Severity.Success);
            accountEvents.OnAccountAdded(this);
        }
        else if (content is not null && !content.IsSucessful)
        {
            Snackbar.Add(content.Message, Severity.Success);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetFromJsonAsync<IList<AccountDto>>("api/Account/GetAccounts");
        if(result is not null)
        {
            accounts = result.Where(x=>x.Type == AccountTypes.Expense);
        }
        else
        {
            accounts = new List<AccountDto>();
        }
    }

}