@page "/PrintStatement"
<MudText Typo="Typo.h4" Align="Align.Center">VAG OBIRI LOTTERIES AGENT STATEMENT</MudText>
<MudDivider Light="true"/>

<div style="margin-top:10px">
    <MudGrid>
        <MudItem xs="12">
            <MudTable Items="Details" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Virtualize="true" FixedHeader="true">
                <ToolBarContent>

                    <MudSpacer />
                    <MudSelect T="string" Label="Select Agent" @bind-Value="AgentId" AnchorOrigin="Origin.BottomCenter" 
                              Variant="Variant.Outlined"
                              SelectedValuesChanged="@(()=>PeriodChanged())">
                        <MudSelectItem Value="@("")"></MudSelectItem>
                        @foreach (var agent in agents.DistinctBy(x => x.Name))
                        {
                            <MudSelectItem T="string" Value="@agent.AgentId">@agent.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSpacer />
                    <MudDatePicker Label="From" Editable="true" @bind-Date="start" PickerClosed="PeriodChanged" Placeholder="Select Date" />
                    <MudSpacer />
                    <MudDatePicker Label="To" Editable="true" @bind-Date="end" PickerClosed="PeriodChanged" Placeholder="Select Date" />
                    <MudSpacer />
                    <button class="btn btn-secondary" onclick="window.print()">PRINT<i class="fa fa-print"></i></button>&nbsp;
                    <MudSpacer />
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Entry Date</MudTh>
                    <MudTh>Draw Date</MudTh>
                    <MudTh>Opening Balance</MudTh>
                    <MudTh>Game</MudTh>
                    <MudTh>Sales</MudTh>
                    <MudTh>Wins</MudTh>
                    <MudTh>Payin</MudTh>
                    <MudTh>Payout</MudTh>
                    <MudTh>Expenses</MudTh>
                    <MudTh>End Balance</MudTh>
                </HeaderContent>
                <RowTemplate Context="d">
                    <MudTd>@d.EntryDate?.ToShortDateString()</MudTd>
                    <MudTd>@d.DrawDate?.ToShortDateString()</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", d.OpeningBalance)</MudTd>
                    <MudTd>@d.Game</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", d.DailySales)</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", d.WinAmount)</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", d.PayinAmount)</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", d.PayoutAmount)</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", d.ExpenseAmount)</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", d.EndBalance)</MudTd>
                </RowTemplate>
                <FooterContent>
                    <MudTd></MudTd>
                    <MudTd></MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", Details.Sum(x => x.OpeningBalance))</MudTd>
                    <MudTd></MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", Details.Sum(x => x.DailySales))</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", Details.Sum(x => x.WinAmount))</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", Details.Sum(x => x.PayinAmount))</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", Details.Sum(x => x.PayoutAmount))</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", Details.Sum(x => x.ExpenseAmount))</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", Details.Sum(x => x.EndBalance))</MudTd>
                </FooterContent>
            </MudTable>
        </MudItem>
    </MudGrid>
</div>

@code {

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    string? AgentId { get; set; } = string.Empty;
    private AgentReportDto? AgentReport = new();//
    public List<SalesDetails> Details { get; set; } = new();
    DateTime? start = DateTime.Today;
    DateTime? end = DateTime.Today;
    private IEnumerable<AgentDto> agents = new List<AgentDto>();

    protected override async Task OnInitializedAsync()
    {
        await GetAgents();
        // var response = await Http.PostAsJsonAsync($"/api/Agent/GetAgentReports/{AgentNumber}", new AMS.Shared.DateRange { StartDate = start, EndDate = end });
        // if (response.IsSuccessStatusCode)
        // {
        //     AgentReport = await response.Content.ReadFromJsonAsync<AgentReportDto>();
        //     // DailySales = Elements.Sum(x => x.Sales);
        //     // Wins = Elements.Sum(x => x.Wins);
        //     // Payin = Elements.Sum(x => x.Payin);
        //     // Payout = Elements.Sum(x => x.Payout);
        //     // ExpenseAmount = Elements.Sum(x => x.ExpenseAmount);
        //     // OutstandingBalance = Elements.Sum(x => x.Balance);
        //     // TotalNum = Elements.Count;
        // }
    }

    async Task PeriodChanged()
    {
        if (!string.IsNullOrEmpty(AgentId))
        {
            var dateRange = new AMS.Shared.DateRange { StartDate = start, EndDate = end };
            var response = await Http.PostAsJsonAsync($"/api/Agent/GetAgentReports/{AgentId}", dateRange);
            if (response.IsSuccessStatusCode)
            {
                AgentReport = await response.Content.ReadFromJsonAsync<AgentReportDto>();
                Details = AgentReport!.Details.Where(x => x.EntryDate >= start && x.EntryDate <= end).ToList();
                // DailySales = Elements.Sum(x => x.Sales);
                // Wins = Elements.Sum(x => x.Wins);
                // Payin = Elements.Sum(x => x.Payin);
                // Payout = Elements.Sum(x => x.Payout);
                // OutstandingBalance = Elements.Sum(x => x.Balance);
                // TotalNum = Elements.Count;
            }
        }
    }

    private async Task GetAgents()
    {
        var result = await Http.GetFromJsonAsync<List<AgentDto>>("api/Agent/GetAgents");
        if (result is not null)
        {
            agents = result;
        }
        else
        {
            agents = new List<AgentDto>();
        }
    }
}
