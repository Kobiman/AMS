@page "/PayoutApprovalList"
@implements IDisposable
@inject AuthenticationStateProvider AuthStateProvider
@using System.Security.Claims
@attribute [Authorize(Roles = "Admin")]

<MudText Typo="Typo.h5">APPROVE PAY-OUT</MudText>
<button class="btn btn-secondary" onclick="window.print()">PRINT<i class="fa fa-print"></i></button>
    @* <MudButton Variant="Variant.Filled" Height="200px" Color="Color.Primary" @onclick="@(() => Modal.Show<AddPayout>("Cash Pay-Out"))">Payout</MudButton> *@
    <div style="margin-top:10px">
    <MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Virtualize="true" FixedHeader="true" Filter="new Func<PayoutDto,bool>(FilterFunc1)" 
        @bind-SelectedItem="selectedItem1" CustomHeader="true" CustomFooter="true">
    <ToolBarContent>
        
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
         <MudSpacer />
         <MudDatePicker Label="From" Editable="true" @bind-Date="start" PickerClosed="PeriodChanged" Placeholder="Select Date" />
         <MudSpacer />
         <MudDatePicker Label="To" Editable="true" @bind-Date="end" PickerClosed="PeriodChanged" Placeholder="Select Date" />
        @*<MudSelect T="string" @bind-Value="@period" SelectedValuesChanged="@(() => PeriodChanged())" Label="Transactions For" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" >
            <MudSelectItem Value="@("Today")" />
            <MudSelectItem Value="@("This Week")" />
            <MudSelectItem Value="@("This Month")" />  
            <MudSelectItem Value="@("This Year")" />
            <MudSelectItem Value="@("All")" />
        </MudSelect>*@
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Date</MudTh>
        <MudTh>Agent</MudTh>
         <MudTh>Area of Operations</MudTh>
        @*<MudTh>Payment Type</MudTh>*@
        <MudTh>Cheque No.</MudTh>
        <MudTh>Amount</MudTh>
        <MudTh>Description</MudTh>       
        <MudTh>Approve</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="CreatedOn">@context.EntryDate.ToString("dd-MMM-yyyy")</MudTd>
        <MudTd DataLabel="Agent">@context.Agent</MudTd> 
        <MudTd DataLabel="Area of Operations">@context.AreaOfOperations</MudTd>
        @*<MudTd DataLabel="Payment Type">&nbsp;</MudTd>*@
        <MudTd DataLabel="Cheque No.">@context.ChequeNo</MudTd>
        <MudTd DataLabel="Amount">@String.Format("{0:0,0.00}",context.Amount)</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        
        <MudTd DataLabel="Approve">

        <MudFab @onclick="@(()=>Approve(@context.Id))" Icon="@Icons.Material.Filled.CheckCircleOutline" Size="Size.Small" />       
         
        </MudTd>
    </RowTemplate>
    @*<FooterContent>
        <MudTFootRow Class="bold-text">
          <MudTd></MudTd>
          <MudTd></MudTd>
          <MudTd></MudTd>
          <MudTd Class="bold-text">Total: @String.Format("{0:0,0.00}",TotalAmount)</MudTd>
        @*</MudTFootRow>
    </FooterContent>*@
    <PagerContent>
        <MudTablePager />
    </PagerContent>
  </MudTable>
</div>

@code {

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private string searchString2 = "";
    private PayoutDto selectedItem1 = null;
    private PayoutDto selectedItem2 = null;
    private HashSet<PayoutDto> selectedItems = new HashSet<PayoutDto>();
    private IEnumerable<PayoutDto> Elements = new List<PayoutDto>();
    private decimal TotalAmount;
    private bool isAdmin;
    DateTime? start = DateTime.Today.AddYears(-1);
    DateTime? end = DateTime.Today;

    string period = "Today";

    protected override async Task OnInitializedAsync()
    {
        accountEvents.AccountAdded += async (source, e) => await ReloadAccounts(source, e);
        await GetRole();

        await GetPayoutReport();
    }

    private async Task GetPayoutReport()
    {
        var dateRange = new AMS.Shared.DateRange { StartDate = start, EndDate = end };
        var response = await Http.PostAsJsonAsync($"/api/AccountTransaction/PayoutReport", dateRange);
        if (response.IsSuccessStatusCode)
        {
            var results = await response.Content.ReadFromJsonAsync<List<PayoutDto>>();
            if(results != null)
            {
                Elements = results.Where(x => x.Approved == false).ToList();
                TotalAmount = Elements.Sum(x => x.Amount);
            }           
        }
    }

    private async Task App_StateChanged(ComponentBase Source)
    {
        if (Source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task ReloadAccounts(object source, EventArgs e)
    {
        await GetPayoutReport();
        await App_StateChanged((ComponentBase)source);
    }

    private bool FilterFunc1(PayoutDto element) => FilterFunc(element, searchString1);
    private bool FilterFunc2(PayoutDto element) => FilterFunc(element, searchString2);

    private bool FilterFunc(PayoutDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Agent.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    //private void CalculateSummuries(string searchString)
    //{
    //    if (string.IsNullOrWhiteSpace(searchString))
    //    {
    //       TotalAmount = Elements.Sum(x => x.Amount);   
    //    }
    //    if (Elements.Select(x=>x.SourceAccount.ToUpper()).Contains(searchString.ToUpper()))
    //    {
    //        TotalAmount = Elements.Where(x => x.SourceAccount.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x=>x.Amount);
    //    }
    //    if (Elements.Select(x=>x.DestinationAccount.ToUpper()).Contains(searchString.ToUpper()))
    //    {
    //        TotalAmount = Elements.Where(x => x.SourceAccount.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x=>x.Amount);
    //    }
    //}

    void IDisposable.Dispose()
    {
        accountEvents.AccountAdded -= async (source, e) => await ReloadAccounts(source, e);
    }

    private async Task Approve(string id)
    {
        var toEdit = Elements.FirstOrDefault(x => x.Id == id);
        if (toEdit != null)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ApprovePayin.editPayout), toEdit);

            var editModal = Modal.Show<ApprovePayin>("Approve Pay-Out", parameters);
            var result = await editModal.Result;
            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
            }
            else
            {
                accountEvents.AccountAdded += async (source, e) => await ReloadAccounts(source, e);
                await GetPayoutReport();
            }
        }
    }
    private async Task GetRole()
    {
        string role = (await AuthStateProvider.GetAuthenticationStateAsync())
        .User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role).Value;
        if (role.Contains("Admin"))
        {
            isAdmin = true;
        }
    }
    async Task PeriodChanged()
    {
        var dateRange = new AMS.Shared.DateRange { StartDate = start, EndDate = end };
        var response = await Http.PostAsJsonAsync($"/api/AccountTransaction/PayoutReport", dateRange);
        if (response.IsSuccessStatusCode)
        {
            Elements = await response.Content.ReadFromJsonAsync<List<PayoutDto>>();
            TotalAmount = Elements.Sum(x => x.Amount);
        }
    }
}
