@page "/Wins_Report"
@using System.Text.Json
@inject MudBlazor.ISnackbar Snackbar
@attribute [Authorize(Roles = "Admin, Winsreport")]

<MudText>WINS</MudText>
@*<button class="btn btn-secondary" onclick="window.print()">PRINT<i class="fa fa-print"></i></button>&nbsp;*@

<div style="margin-top:10px">
    <MudDataGrid Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Virtualize="true" FixedHeader="true" Filter="new Func<SalesDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>

            <MudSpacer />
            <MudSpacer />
            <MudDatePicker Label="From" Editable="true" @bind-Date="start" PickerClosed="PeriodChanged" Placeholder="Select Date" />
            <MudSpacer />
            <MudDatePicker Label="To" Editable="true" @bind-Date="end" PickerClosed="PeriodChanged" Placeholder="Select Date" />
            <MudSpacer />
        </ToolBarContent>
        <Columns>
            <HierarchyColumn T="SalesDto" />
            <PropertyColumn Property="x => x.EntryDate" Title="Entry Date"/>
            <PropertyColumn Property="x => x.DrawDate" Title="Draw Date"/>
            <PropertyColumn Property="x => x.AgentName" Title="Agent Name"/>
            <PropertyColumn Property="x => x.GameName" Title="Game Name"/>
            <PropertyColumn Property="x => x.AreaOfOperations" Title="Area Of Operation"/>
            @*<PropertyColumn Property="x => x.NumberOfSheets" Title="Number Of Sheets"/>*@
            <PropertyColumn Property="x => x.WinAmount" Title="Win Amount"/>
            <PropertyColumn Property="x => x.WinsStaffId" Title="Entered By" />
            @*<PropertyColumn Property="x => x.Description">
                <CellTemplate>
                    @if (!isAdmin)
                    {
                        <MudButton Variant="Variant.Text" Size="Size.Small" Color="Color.Info" @onclick="@(() => {
                            var parameters = new ModalParameters();
                            parameters.Add("model",context.Item);
                            Modal.Show<WinsRegister>("Wins Register",parameters);
                            })">Add Win Amount
                        </MudButton>
                    }
                </CellTemplate>
            </PropertyColumn>*@
        </Columns>
        <ChildRowContent>
            <MudGrid>
                <MudItem xs="12">
                    <MudText>Sheets</MudText>
                    @{
                        var sheets = string.IsNullOrWhiteSpace(context.Item.Sheet) ? new List<Sheet>() : JsonSerializer.Deserialize<IList<Sheet>>(context.Item.Sheet);
                        <MudTable Items="@sheets" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Virtualize="true" FixedHeader="true">
                            <HeaderContent>
                                <MudTh>No.</MudTh>
                                <MudTh>Amount</MudTh>
                                <MudTh>Treated By</MudTh>
                                <MudTh>Approved By</MudTh>
                            </HeaderContent>
                            <RowTemplate Context="d">
                                <MudTd>@d.SheetNo</MudTd>
                                    <MudTd>@String.Format("{0:0,0.00}", d.Amount)</MudTd>
                                    <MudTd>@d.TreatedBy</MudTd>
                                    <MudTd>@d.ApprovedBy</MudTd>
                                </RowTemplate>
                            </MudTable>
                    }
                </MudItem>
            </MudGrid>
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="SalesDto" />
        </PagerContent>
    </MudDataGrid>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public SalesDto Transaction { get; set; }
    SalesDto model = new SalesDto();

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private SalesDto selectedItem1 = null;
    private IEnumerable<AccountDto> accounts { get; set; }
    private IEnumerable<Agent> agents { get; set; } = new List<Agent>();
    private IEnumerable<Game>? games { get; set; }
    bool success;
    string[] errors = { };
    DateTime? start = DateTime.Today;
    DateTime? end = DateTime.Today;
    private List<SalesDto>? Elements { get; set; }
    private bool isAdmin = false;
    public int TotalNum { get; set; }
    public decimal Wins { get; set; }

    private async void OnValidSubmit(EditContext context)
    {
        //HttpResponseMessage response = await Http.PostAsJsonAsync<AccountTransaction>("api/AccountTransaction", model);
        var response = await Http.PostAsJsonAsync("api/Sales/ApproveTransaction", model);
        if (response.IsSuccessStatusCode)
        {
            model = new SalesDto();
            //var result = await response.Content.ReadFromJsonAsync<Result>();
            var result = await response.Content.ReadFromJsonAsync<SalesDto>();
            Snackbar.Add("Transaction Approved", Severity.Success);
            await ModalInstance.CloseAsync(ModalResult.Ok(result));
        }
        else
        {
            model = new SalesDto();
            Snackbar.Add("Transaction Failed", Severity.Error);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAccounts();
        await GetAgents();
        await GetGames();
        await GetSalesRecords();
        // model = new SalesDto();
        // model.Id = Transaction.Id;
        // model.AccountId = Transaction.AccountId;
        // model.EntryDate = Transaction.EntryDate;
        // model.AgentId = Transaction.AgentId;
        // model.GameId = Transaction.GameId;
        // model.WinAmount = Transaction.WinAmount;
        // model.DailySales = Transaction.DailySales;
        // model.Description = Transaction.Description;

    }

    private async Task GetSalesRecords()
    {
        var dateRange = new AMS.Shared.DateRange { StartDate = start, EndDate = end };
        var response = await Http.PostAsJsonAsync($"/api/Sales/GetWinsReport", dateRange);
        if (response.IsSuccessStatusCode)
        {
            var results = await response.Content.ReadFromJsonAsync<List<SalesDto>>();
            //if (results != null)
            //{
            //    Elements = results;
            //}
            //TotalNum = Elements.Count;
            Elements = results.Where(x => x.WinAmount > 0.0M).ToList();
            //  Winstotal = Elements.Sum(x => x.WinAmount);
            //Wins = Elements.Sum(x => x.WinAmount);
            TotalNum = Elements.Count;
        }
    }

    async Task PeriodChanged()
    {
        var dateRange = new AMS.Shared.DateRange { StartDate = start, EndDate = end };
        var response = await Http.PostAsJsonAsync($"/api/Sales/GetWinsReport", dateRange);
        if (response.IsSuccessStatusCode)
        {
            var results = await response.Content.ReadFromJsonAsync<List<SalesDto>>();
            Elements = results.Where(x => x.WinAmount > 0.0M).ToList();
            TotalNum = Elements.Count;
        }
    }

    async Task LoadAccounts()
    {
        var result = await Http.GetFromJsonAsync<IList<AccountDto>>("api/Account/GetAccounts");
        if (result is not null)
        {
            accounts = result;
        }
        else
        {
            accounts = new List<AccountDto>();
        }
    }
    private async Task GetAgents()
    {
        var result = await Http.GetFromJsonAsync<List<Agent>>("api/Agent/GetApprovedAgents");
        if (result is not null)
        {
            agents = result;
        }
        else
        {
            agents = new List<Agent>();
        }
    }
    private async Task GetGames()
    {
        var result = await Http.GetFromJsonAsync<IList<Game>?>("api/Game/GetGames");
        if (result is not null)
        {
            games = result;
        }
        else
        {
            games = new List<Game>();
        }
    }

    private bool FilterFunc1(SalesDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(SalesDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.AgentName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.GameName.Equals(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
