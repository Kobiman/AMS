@page "/WinsReport"
@attribute [Authorize(Roles = "Admin, Sales")]

<MudText>WINS REPORT</MudText><button class="btn btn-secondary" onclick="window.print()">PRINT<i class="fa fa-print"></i></button>
<div style="margin-top:10px">
    <MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Virtualize="true" FixedHeader="true" Filter="new Func<SalesDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>

            <MudSpacer />
            <MudDatePicker Label="From" Editable="true" @bind-Date="start" PickerClosed="PeriodChanged" Placeholder="Select Date" />
            <MudSpacer />
            <MudDatePicker Label="To" Editable="true" @bind-Date="end" PickerClosed="PeriodChanged" Placeholder="Select Date" />
            <MudSpacer />
            <MudSelect T="string" Label="Select Game" @bind-Value="searchString1" AnchorOrigin="Origin.BottomCenter"
                       SelectedValuesChanged="@(()=>CalculateSummuries(@searchString1))" Variant="Variant.Outlined">
                <MudSelectItem Value="@("")">All</MudSelectItem>
                @foreach (var game in games)
                {
                    <MudSelectItem T="string" Value="@game.Id">@game.Name</MudSelectItem>
                }
            </MudSelect>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>EntryDate</MudTh>
            <MudTh>DrawDate</MudTh>
            @*<MudTh>Agent</MudTh>*@
            <MudTh>Game</MudTh>
            @*<MudTh>Sales</MudTh>*@
            <MudTh>Wins</MudTh>
            <MudTh>Description</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="EntryDate">@context.EntryDate</MudTd>
            <MudTd DataLabel="EntryDate">@context.DrawDate</MudTd>
            @*<MudTd DataLabel="Agent">@context.AgentName</MudTd>*@
            <MudTd DataLabel="Game">@context.GameName</MudTd>
@*            <MudTd DataLabel="Sales">@String.Format("{0:0,0.00}",context.DailySales)</MudTd>*@
            <MudTd DataLabel="Wins">@String.Format("{0:0,0.00}",context.WinAmount)</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
        </RowTemplate>
        <FooterContent>
                <MudTd></MudTd>
                <MudTd></MudTd>
                <MudTd></MudTd>
                @*<MudTd></MudTd>*@
                @*<MudTd Class="bold-text">@String.Format("{0:0,0.00}",DailySales)</MudTd>*@
                <MudTd Class="bold-text">@String.Format("{0:0,0.00}",Wins)</MudTd>
                <MudTd Class="bold-text"></MudTd>
        </FooterContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</div>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private SalesDto selectedItem1 = null;
    DateTime? start = DateTime.Today;
    DateTime? end = DateTime.Today;
    private IEnumerable<Game>? games { get; set; }

    private List<SalesDto>? Elements { get; set; }
    string period = "Today";

    public int TotalNum { get; set; }
    public decimal DailySales { get; set; }
    public decimal OutstandingBalance { get; set; }
    public decimal Wins { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.PostAsJsonAsync($"/api/Sales/GetTransactions", new AMS.Shared.DateRange());
        if (response.IsSuccessStatusCode)
        {
            Elements = await response.Content.ReadFromJsonAsync<List<SalesDto>>();
            DailySales = Elements.Sum(x => x.DailySales);
            Wins = Elements.Sum(x => x.WinAmount);
            TotalNum = Elements.Count;
        }
        await GetGames();
    }


    private bool FilterFunc1(SalesDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(SalesDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.AgentName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private void CalculateSummuries(string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            DailySales = Elements.Sum(x => x.DailySales);
            Wins = Elements.Sum(x => x.WinAmount);
        }
        if (Elements.Select(x => x.Description.ToUpper()).Contains(searchString.ToUpper()))
        {
            DailySales = Elements.Where(x => x.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x => x.DailySales);
            Wins = Elements.Where(x => x.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x => x.WinAmount);
        }
        if (Elements.Select(x => x.AgentName.ToUpper()).Contains(searchString.ToUpper()))
        {
            DailySales = Elements.Where(x => x.AgentName.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x => x.DailySales);
            Wins = Elements.Where(x => x.AgentName.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x => x.WinAmount);
        }
    }

    async Task PeriodChanged()
    {
        var dateRange = new AMS.Shared.DateRange { StartDate = start, EndDate = end };
        var response = await Http.PostAsJsonAsync($"/api/Sales/GetTransactions", dateRange);
        if (response.IsSuccessStatusCode)
        {
            Elements = await response.Content.ReadFromJsonAsync<List<SalesDto>>();
            DailySales = Elements.Sum(x => x.DailySales);
            Wins = Elements.Sum(x => x.WinAmount);
            TotalNum = Elements.Count;
        }
    }

    private async Task GetGames()
    {
        var result = await Http.GetFromJsonAsync<IList<Game>?>("api/Game/GetGames");
        if (result is not null)
        {
            games = result;
        }
        else
        {
            games = new List<Game>();
        }
    }
}

