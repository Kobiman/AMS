@page "/AgentStatement"
@inject AgentReportDto SharedAgentReport
<MudText Typo="Typo.h6">Agent Account Statement</MudText>
<div style="margin-top:10px">
    <MudGrid>
        <MudItem xs="12">
            <MudText>@SharedAgentReport.Name</MudText>
            <MudTable Items="SharedAgentReport.Details" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Virtualize="true" FixedHeader="true">
                <HeaderContent>
                    <MudTh>Entry Date</MudTh>
                    <MudTh>Draw Date</MudTh>
                    <MudTh>Opening Balance</MudTh>
                    <MudTh>Sales</MudTh>
                    <MudTh>Wins</MudTh>
                    <MudTh>Payin</MudTh>
                    <MudTh>Payout</MudTh>
                    <MudTh>Expenses</MudTh>
                    <MudTh>End Balance</MudTh>
                </HeaderContent>
                <RowTemplate Context="d">
                    <MudTd>@d.EntryDate?.ToShortDateString()</MudTd>
                    <MudTd>@d.DrawDate?.ToShortDateString()</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", d.OpeningBalance)</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", d.DailySales)</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", d.WinAmount)</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", d.PayinAmount)</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", d.PayoutAmount)</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", d.ExpenseAmount)</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", d.EndBalance)</MudTd>
                </RowTemplate>
                <FooterContent>
                    <MudTd></MudTd>
                    <MudTd></MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", SharedAgentReport.Details.Sum(x => x.OpeningBalance))</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", SharedAgentReport.Details.Sum(x => x.DailySales))</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", SharedAgentReport.Details.Sum(x => x.WinAmount))</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", SharedAgentReport.Details.Sum(x => x.PayinAmount))</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", SharedAgentReport.Details.Sum(x => x.PayoutAmount))</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", SharedAgentReport.Details.Sum(x => x.ExpenseAmount))</MudTd>
                    <MudTd>@String.Format("{0:0,0.00}", SharedAgentReport.Details.Sum(x => x.EndBalance))</MudTd>
                </FooterContent>
            </MudTable>
        </MudItem>
    </MudGrid>
</div>

@code {

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private string searchString2 = "";
    private AccountDto selectedItem1 = null;
    private AccountDto selectedItem2 = null;
    private HashSet<AccountDto> selectedItems = new HashSet<AccountDto>();
    private IEnumerable<AccountDto> Elements = new List<AccountDto>();

    private AgentReportDto? AgentReport { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        AgentReport = SharedAgentReport;
    }

    private async Task GetAccounts()
    {
        var result = await Http.GetFromJsonAsync<IList<AccountDto>>("api/Account/GetAccounts");
        if (result is not null)
        {
            Elements = result.OrderBy(x => x.Code);
        }
        else
        {
            Elements = new List<AccountDto>();
        }
    }

    private bool FilterFunc1(AccountDto element) => FilterFunc(element, searchString1);
    private bool FilterFunc2(AccountDto element) => FilterFunc(element, searchString2);

    private bool FilterFunc(AccountDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.AccountName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Type.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}