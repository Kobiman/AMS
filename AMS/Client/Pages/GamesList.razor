@page "/Games"
@implements IDisposable
@attribute [Authorize(Roles = "Admin")]

<MudGrid>
    <MudItem xs="6">
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h6">Games</MudText>
                <MudSpacer />
                <MudButton Variant="Variant.Filled" Height="200px" Color="Color.Primary" @onclick="ShowModal">Add New Game</MudButton>
            </MudCardHeader>
            <MudCardContent>
                <div style="margin-top:10px">
                    <MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Virtualize="true" FixedHeader="true" CustomHeader="true" CustomFooter="true">
                        <HeaderContent>
                            <MudTh>No.</MudTh>
                            <MudTh>Name of Game</MudTh>
                            <MudTh>Game Commision (%)</MudTh>
                            <MudTh>Action</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="No.">@context.Srl</MudTd>
                            <MudTd DataLabel="Name of Game">@context.Name</MudTd>
                            <MudTd DataLabel="Game Commission (%)">@context.Commission</MudTd>
                            <MudTd DataLabel="">
                                <MudButton Variant="Variant.Text" Size="Size.Small" Color="Color.Info" @onclick="@(() => {
                        var parameters = new ModalParameters();
                        parameters.Add("model",@context);
                        Modal.Show<EditGame>("Edit Commission",parameters);
                            })">Edit</MudButton>

                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;

    private List<Game>? Elements { get; set; }

    protected override async Task OnInitializedAsync()
    {
        accountEvents.AccountAdded += async (source, e) => await ReloadAccounts(source, e);
        await GetRecords();
    }

    private async Task App_StateChanged(ComponentBase Source)
    {
        if (Source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }
    public async Task ReloadAccounts(object source, EventArgs e)
    {
        await GetRecords();
        await App_StateChanged((ComponentBase)source);
    }
    public async Task GetRecords()
    {
        var result = await Http.GetFromJsonAsync<List<Game>?>($"api/Game/GetGames");
        if (result is not null)
        {
            Elements = result;
        }
        else
        {
            Elements = new List<Game>();
        }
    }
    async Task ShowModal()
    {
        var gameModal = Modal.Show<AddGame>("Add New Game");
        var result = await gameModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            Elements.Add((Game)result.Data);
            StateHasChanged();
        }
    }
    void IDisposable.Dispose()
    {
        accountEvents.AccountAdded -= async (source, e) => await ReloadAccounts(source, e);
    }

}
