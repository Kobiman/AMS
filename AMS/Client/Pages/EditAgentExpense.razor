@attribute [Authorize(Roles = "Admin")]


<div style="width: 450px;">
    <EditForm @bind-IsValid="@success" @bind-Errors="@errors" Model="model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudDatePicker Editable="true" @bind-Date="model.EntryDate" Placeholder="Date"
                       RequiredError="Entry date is required!" For="@(() => model.EntryDate)" />


        <MudTextField T="string" Label="Agent" Required="true" @bind-Value="model.Agent" ReadOnly="true" />

        <MudDatePicker Editable="true" @bind-Date="model.Date" Placeholder="Expense Date"
                    RequiredError="Entry date is required!" For="@(() => model.Date)" />

        <MudTextField T="string" Label="Description" Required="true" @bind-Value="model.Description"
                    RequiredError="Description is required!" For="@(() => model.Description)" />

        <MudNumericField HideSpinButtons="true" @bind-Value="model.Amount"
                        Label="Amount" Variant="Variant.Text" />


        <ValidationSummary />
        <div style="margin-top:15px" class="mud-card-actions">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
        </div>
    </EditForm>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public AgentExpenseDto model{ get; set; } = new AgentExpenseDto();

    bool success;
    string[] errors = { };

    private async void OnValidSubmit(EditContext context)
    {
        var response = await Http.PutAsJsonAsync("api/AccountTransaction/EditAgentExpense", model);
        if (response.IsSuccessStatusCode)
        {
            model = new AgentExpenseDto();
            var result = await response.Content.ReadFromJsonAsync<Result>();
            await ModalInstance.CloseAsync();
            Snackbar.Add(result.Message, Severity.Success);
            accountEvents.OnAccountAdded(this);
            StateHasChanged();
        }
        else
        {
            model = new AgentExpenseDto();
            await ModalInstance.CloseAsync();
            Snackbar.Add("Save Transaction Failed", Severity.Error);
            StateHasChanged();
        }
    }
}
