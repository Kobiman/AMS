@page "/EditPayin"
@attribute [Authorize(Roles = "Admin, Sales")]

@if (agents == null)
{
    <div>Loading Data...</div>
}
else
{
    <div style="width: 450px;">
        <EditForm @bind-IsValid="@success" @bind-Errors="@errors" Model="model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudDatePicker  Date="@model.EntryDate" DateChanged="OnDateChanged"
                       RequiredError="Entry date is required!"   />


            <MudSelect T="string" Label="Select Agent" @bind-Value="model.AgentId" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
                @foreach (var agent in agents)
                {
                    <MudSelectItem T="string" Value="@agent.AgentId">@agent.Name</MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="string" Label="Payment Method" AnchorOrigin="Origin.BottomCenter"
                       Variant="Variant.Outlined">
                <MudSelectItem T="string" Value="@("Cash")">Cash</MudSelectItem>
                <MudSelectItem T="string" Value="@("Cheque")">Cheque</MudSelectItem>
                <MudSelectItem T="string" Value="@("MoMo")">MoMo</MudSelectItem>
            </MudSelect>

          <MudTextField T="string" Label="Cheque/MoMo Transaction ID" @bind-Value="model.ChequeNo"/>

            <MudTextField T="string" Label="Description" Required="true" @bind-Value="model.Description"
                      RequiredError="Description is required!" For="@(() => model.Description)" />

            <MudNumericField HideSpinButtons="true" @bind-Value="model.Amount"
                         Label="Amount" Variant="Variant.Text" />
            <MudTextField T="string" @bind-Value="model.ReceivedBy"
                          Label="Received By" Variant="Variant.Text" />
            <MudTextField T="string" @bind-Value="model.ReceivedFrom"
                          Label="Received From" Variant="Variant.Text" />
            <ValidationSummary />
            <div style="margin-top:15px" class="mud-card-actions">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
            </div>
        </EditForm>
    </div>
}
@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public PayoutDto model { get; set; } = new PayoutDto();

    private IEnumerable<AccountDto> accounts { get; set; }
    private IEnumerable<Agent> agents = new List<Agent>();
    private IEnumerable<Game>? games { get; set; }
    DateTime? _date = DateTime.Today;
    bool success;
    string[] errors = { };

    private async void OnValidSubmit(EditContext context)
    {
        //model.Type = "Payin";
        model.Amount = Math.Abs(model.Amount);

         var response = await Http.PutAsJsonAsync("api/AccountTransaction/EditPayout", model);
        if (response.IsSuccessStatusCode)
        {
            model = new PayoutDto();
            var result = await response.Content.ReadFromJsonAsync<Result<AccountTransactionDto>>();
            Snackbar.Add(result.Message, Severity.Success);
            accountEvents.OnAccountAdded(this);
            await ModalInstance.CloseAsync(ModalResult.Ok(result.Value));
        }
        else
        {
            model = new PayoutDto();
            Snackbar.Add("Save Transaction Failed", Severity.Error);
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        await GetAgents();
        //model = editPayout;
    }
    void OnDateChanged(DateTime? newdate)
    {
        model.EntryDate = (DateTime)newdate;
    }
    protected override async Task OnInitializedAsync()
    {
        await GetAccounts();        
        await GetGames();
    }
    private async Task GetAgents()
    {
        var result = await Http.GetFromJsonAsync<List<Agent>>("api/Agent/GetApprovedAgents");
        if (result is not null)
        {
            agents = result;
        }
        else
        {
            agents = new List<Agent>();
        }
    }
    private async Task GetAccounts()
    {
         var result = await Http.GetFromJsonAsync<IList<AccountDto>>("api/Account/GetAccounts");
        if (result is not null)
        {
            accounts = result;
        }
        else
        {
            accounts = new List<AccountDto>();
        }
    }
    private async Task GetGames()
    {
        var result = await Http.GetFromJsonAsync<IList<Game>?>("api/Game/GetGames");
        if (result is not null)
        {
            games = result;
        }
        else
        {
            games = new List<Game>();
        }
    }
}
