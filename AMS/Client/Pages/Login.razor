@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthStateProvider
@layout LoginLayout

@page "/"
@page "/Login"

@using System.Text.RegularExpressions

<PageTitle>Login</PageTitle>



<center>
   @* <MudPaper Class="pa-6 ma-6" Width="450px">
    <EditForm  @bind-IsValid="@success" @bind-Errors="@errors" Model="@model" OnValidSubmit="OnValidSubmit">
          <DataAnnotationsValidator />
        <MudTextField T="string" Label="Email" Required="true" @bind-Value="model.Email" 
        RequiredError="Email is a required field" For="@(() => model.Email)" InputType="InputType.Email"/>

        <MudTextField T="string" Label="Password" Required="true" @bind-Value="model.Password" 
        RequiredError="Password is a required field" For="@(() => model.Password)" InputType="InputType.Password"/>            
            
     <div style="margin-top:15px"  class="mud-card-actions">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Login</MudButton>
    </div>
    <ValidationSummary />
    </EditForm>
</MudPaper>*@
<MudPaper Square="true" Class="d-flex pa-md-6  justify-space-around">
  
   <EditForm  @bind-IsValid="@success" @bind-Errors="@errors" Model="@model" OnValidSubmit="OnValidSubmit">
          <DataAnnotationsValidator />
        <MudTextField T="string" Label="Email" Required="true" @bind-Value="model.Email" 
        RequiredError="Email is a required field" For="@(() => model.Email)" InputType="InputType.Email" Variant="Variant.Outlined"/>

        <MudTextField T="string" Label="Password" Required="true" @bind-Value="model.Password" 
        RequiredError="Password is a required field" For="@(() => model.Password)" InputType="InputType.Password" Variant="Variant.Outlined"/>            
            
     <div style="margin-top:15px"  class="mud-card-actions">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Login</MudButton>
    </div>
    <ValidationSummary />
    </EditForm>

    <MudDivider Vertical="true" FlexItem="true" />
    
     <img src="/Images/bg.png" alt="Image" width="900"/>
</MudPaper>

</center>

@code {

    bool success;
    private UserLogin model = new UserLogin();
    string errors = "";


    private async void OnValidSubmit(EditContext context)
    {
        var response = await Http.PostAsJsonAsync("api/Auth/Login", model);
        var content = await response.Content.ReadFromJsonAsync<Result<string>>();
        if(content.IsSucessful)
        {
            errors = "";
            await localStorage.SetItemAsync("authToken", content.Value);
            await AuthStateProvider.GetAuthenticationStateAsync();
            Snackbar.Add(content.Message,Severity.Success);
            navigationManager.NavigateTo("/home");
        }
        else
        {
            errors = content.Message;
            model = new UserLogin();
            Snackbar.Add(errors, Severity.Error);
        }
    }
}