@page "/AddAccountTransaction"

@if(accounts == null)
{
    <div>Loading Data...</div>
}
else{
<div style="width: 450px;">
    <EditForm  @bind-IsValid="@success" @bind-Errors="@errors" Model="model" OnValidSubmit="OnValidSubmit">
          <DataAnnotationsValidator />

                @*<MudSelect T="AccountDto" Label="Select Account"  @bind-Value="value"  AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
                    @foreach(var account in accounts)
                    {
                        <MudSelectItem T="AccountDto" Value="@account">@account.AccountName</MudSelectItem>
                    }
                </MudSelect>*@
                <MudSelect T="string" Label="Select Account"  @bind-Value="model.AccountId"  AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
                    @foreach(var account in accounts)
                    {
                        <MudSelectItem T="string" Value="@account.AccountId">@account.AccountName</MudSelectItem>
                    }
                </MudSelect>

             <MudTextField T="string" Label="Description" Required="true" @bind-Value="model.Description" 
            RequiredError="Description is required!" For="@(() => model.Description)"/>

            <MudNumericField HideSpinButtons="true"  @bind-Value="model.Amount"
            Label="Amount" Variant="Variant.Text" />

            <MudNumericField HideSpinButtons="true"  @bind-Value="model.Credit"
            Label="Credit" Variant="Variant.Text" />

            <MudNumericField HideSpinButtons="true"  @bind-Value="model.Debit"
            Label="Debit" Variant="Variant.Text" Min="0" />

            <MudDatePicker Label="Transaction Date" @bind-Date="model.TransactionDate" />

            <ValidationSummary />
     <div style="margin-top:15px"  class="mud-card-actions">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
    </div>
    </EditForm>
</div>
}
@code {
    //[CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    AccountTransaction model = new AccountTransaction();

    private AccountTransaction AddedTransaction = null;

    private IEnumerable<AccountDto> accounts { get; set; }
    bool success;
    string[] errors = { };

    private async void OnValidSubmit(EditContext context)
    {
        //HttpResponseMessage response = await Http.PostAsJsonAsync<AccountTransaction>("api/AccountTransaction", model);
        var response = await Http.PostAsJsonAsync("api/AccountTransaction/AddTransaction", model);
        if(response.IsSuccessStatusCode)
        {
            AddedTransaction = await response.Content.ReadFromJsonAsync<AccountTransaction>();
        }
        //AccountTransaction                      
        //var response = await Http.PostAsJsonAsync<AccountTransaction>("api/AccountTransaction",model);
        //var content = await response.Content.ReadFromJsonAsync<Result>();
        //if (content is not null && content.IsSucessful)
        //{
        //    AccountTransaction model = new AccountTransaction();
        //    await ModalInstance.CloseAsync();
        //    toastService.ShowAlert(this, "alert-success", content.Message);
        //    toastService.CloseAlert(this);
        //}
        //else
        //{
        //    await ModalInstance.CloseAsync();
        //    toastService.ShowAlert(this, "alert-danger", content.Message);
        //    toastService.CloseAlert(this);
        //}
        //StateHasChanged();
        //Console.WriteLine($"Create Transaction|| Id:{AddedTransaction.Id} || Description: {AddedTransaction.Description} || AccountId: {AddedTransaction.AccountId} || C:{AddedTransaction.Credit} || D: {AddedTransaction.Debit} || A: {AddedTransaction.Amount} || Acc: {AddedTransaction.Account} || Date: {AddedTransaction.TransactionDate}");
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetFromJsonAsync<IList<AccountDto>>("api/Account/GetAccounts");
        if(result is not null)
        {
            accounts = result;
        }
        else
        {
            accounts = new List<AccountDto>();
        }
    }
}
