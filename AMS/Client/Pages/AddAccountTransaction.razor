@page "/AddAccountTransaction"
@if(accounts == null)
{
    <div>Loading Data...</div>
}
else{
<div style="width: 450px;">
    <EditForm  @bind-IsValid="@success" @bind-Errors="@errors" Model="model" OnValidSubmit="OnValidSubmit">
          <DataAnnotationsValidator />
                <MudSelect T="string" Label="Select Account"  @bind-Value="model.AccountId"  AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined"
                 RequiredError="Account is required!" For="@(() => model.AccountId)">
                    @foreach(var account in accounts)
                    {
                        <MudSelectItem T="string" Value="@account.AccountId">@account.AccountName</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect T="string" Label="Select Operation"  Required="true"  @bind-Value="model.Operation"  AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined"
                RequiredError="Operation is required!" For="@(() => model.Operation)">
                      <MudSelectItem T="string" Value="@JournalEntryRules.Increase">@JournalEntryRules.Increase</MudSelectItem>
                       <MudSelectItem T="string" Value="@JournalEntryRules.Decrease">@JournalEntryRules.Decrease</MudSelectItem>
                </MudSelect>

             <MudTextField T="string" Label="Description" Required="true" @bind-Value="model.Description" 
            RequiredError="Description is required!" For="@(() => model.Description)"/>

             <MudNumericField HideSpinButtons="true"  @bind-Value="model.Amount" Required="true" RequiredError="Amount is required!" For="@(() => model.Amount)"
            Label="Daily Sales" Variant="Variant.Text" />
           
            <ValidationSummary />
     <div style="margin-top:15px"  class="mud-card-actions">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
    </div>
    </EditForm>
</div>
}
@code {
    //[CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    AddTransactionDto model = new AddTransactionDto();

    private IEnumerable<AccountDto> accounts { get; set; }
    bool success;
    string[] errors = { };

    private async void OnValidSubmit(EditContext context)
    {
        model.AccountType = accounts.FirstOrDefault(x => x.AccountId == model.AccountId).Type;
        var response = await Http.PostAsJsonAsync("api/AccountTransaction/AddAccountTransaction", model);

        if(response.IsSuccessStatusCode)
        {
            model = new AddTransactionDto();
            var result = await response.Content.ReadFromJsonAsync<Result>();
            Snackbar.Add("Transaction Saved", Severity.Success);
            //await ModalInstance.CloseAsync();
        }
        else
        {
            Snackbar.Add("Save Transaction Failed", Severity.Error);   
        }

    }

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetFromJsonAsync<IList<AccountDto>>("api/Account/GetAccounts");
        if(result is not null)
        {
            accounts = result;
        }
        else
        {
            accounts = new List<AccountDto>();
        }
    }
}
