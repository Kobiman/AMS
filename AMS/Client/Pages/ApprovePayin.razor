@page "/ApprovePayin"
@attribute [Authorize(Roles = "Admin, Sales")]


<div style="width: 450px;">
    <EditForm @bind-IsValid="@success" @bind-Errors="@errors" Model="model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudTextField T="string" Label="Date"  @bind-Value="_date" ReadOnly  />


       @* <MudSelect T="string" Label="Select Agent" @bind-Value="model.AgentId" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
            @foreach (var agent in agents)
            {
                <MudSelectItem T="string" Value="@agent.AgentId">@agent.Name</MudSelectItem>
            }
        </MudSelect>*@

        <MudTextField T="string" Label="Agent" Required="true" @bind-Value="_agentname"
                    ReadOnly />

        <MudTextField T="string" Label="Description" Required="true" @bind-Value="model.Description"
                    ReadOnly />

        <MudNumericField HideSpinButtons="true" @bind-Value="model.Amount"
                        Label="Amount" Variant="Variant.Text" ReadOnly />

        <ValidationSummary />
        <div style="margin-top:15px" class="mud-card-actions">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Approve</MudButton>
        </div>
    </EditForm>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    Payout model = new Payout();
    [Parameter]public PayoutDto editPayout { get; set; }

    string _agentname = "";
    string _date = "";
    bool success;
    string[] errors = { };

    private async void OnValidSubmit(EditContext context)
    {

        var response = await Http.PutAsJsonAsync("api/AccountTransaction/ApprovePayout", editPayout);
        if (response.IsSuccessStatusCode)
        {
            model = new Payout();
            var result = await response.Content.ReadFromJsonAsync<Result<AccountTransactionDto>>();
            Snackbar.Add(result.Message, Severity.Success);
            accountEvents.OnAccountAdded(this);
            await ModalInstance.CloseAsync(ModalResult.Ok(result.Value));
        }
        else
        {
            model = new Payout();
            Snackbar.Add("Save Transaction Failed", Severity.Error);
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        model = new Payout();
        model.Id = editPayout.Id;
        model.Type = editPayout.Type;
        model.AgentId = editPayout.AgentId;
        model.Amount = editPayout.Amount;
        model.Description = editPayout.Description;
        _date = editPayout.EntryDate.ToLongDateString();
        _agentname = editPayout.Agent;
    }   
}
