@using System.Text.RegularExpressions
@page "/addAgent"
@attribute [Authorize(Roles ="Admin, Sales")]


<div style="width: 450px;">
    <EditForm  @bind-IsValid="@success" @bind-Errors="@errors" Model="@model" OnValidSubmit="OnValidSubmit">
          <DataAnnotationsValidator />
            <MudTextField T="string" Label="Name" Required="true" @bind-Value="model.Name" 
            RequiredError="Agent name is required!" For="@(() => model.Name)"/>
            <MudTextField T="string" Label="Contact" Required="true" @bind-Value="model.Contact" 
            RequiredError="Contact is required!" For="@(() => model.Contact)"/>  
            <MudSelect T="string" Label="Select Region"  @bind-Value="model.Region"  AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
                @foreach (var r in regions)
                {
                   <MudSelectItem T="string" Value="@r">@r</MudSelectItem>
                }
            </MudSelect>
     <div style="margin-top:15px"  class="mud-card-actions">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
    </div>
    </EditForm>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    bool success;
    Agent model = new Agent();
    string[] errors = { };
        private string[] regions =
        {
           "Ahafo","Ashanti","Bono","Bono East",
           "Central","Eastern","Greater Accra",
           "Nort East","Northern","Oti","Savannah",
           "Upper East","Upper West","Volta","Western",
           "Western North"
        };


    private async void OnValidSubmit(EditContext context)
    {
        var response = await Http.PostAsJsonAsync("api/Agent/AddAgent",model);
        var content = await response.Content.ReadFromJsonAsync<Result>();
        if (content is not null && content.IsSucessful)
        {
            Agent model = new Agent();
            await ModalInstance.CloseAsync();
            Snackbar.Add(content.Message, Severity.Success);
            accountEvents.OnAccountAdded(this);
        }
        else if (content is not null && !content.IsSucessful)
        {
            await ModalInstance.CloseAsync();
            Snackbar.Add(content.Message, Severity.Success);
        }
        StateHasChanged();
    }
}
