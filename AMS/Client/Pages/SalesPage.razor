@page "/Sales"
@implements IDisposable
@inject AuthenticationStateProvider AuthStateProvider
@using System.Security.Claims
@attribute [Authorize(Roles ="Admin, Sales")]

<MudText>SALES</MudText>
<button class="btn btn-secondary" onclick="window.print()">PRINT<i class="fa fa-print"></i></button>&nbsp;
@if (!isAdmin)
{
    <MudButton Variant="Variant.Filled" Height="200px" Color="Color.Primary" @onclick="ShowModal">Add Sales</MudButton>
}
    <div style="margin-top:10px">
    <MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Virtualize="true" FixedHeader="true" Filter="new Func<SalesDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        
        <MudSpacer />
        @* <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" TextChanged ="@(()=>CalculateSummuries(@searchString1))"  IconSize="Size.Medium" Class="mt-0"></MudTextField> *@
        <MudSpacer />
        <MudDatePicker Label="From" Editable="true" @bind-Date="start" PickerClosed="PeriodChanged" Placeholder="Select Date" />
        <MudSpacer />
        <MudDatePicker Label="To" Editable="true" @bind-Date="end" PickerClosed="PeriodChanged" Placeholder="Select Date" />
        <MudSpacer />
        <MudSelect T="string" Label="Select Game" @bind-Value="searchString1" AnchorOrigin="Origin.BottomCenter"
                   SelectedValuesChanged="@(()=>CalculateSummuries(@searchString1))" Variant="Variant.Outlined">
            <MudSelectItem Value="@("")">All</MudSelectItem>
            @foreach (var game in games)
            {
                    <MudSelectItem T="string" Value="@game.Name">@game.Name</MudSelectItem>
            }
        </MudSelect>

    </ToolBarContent>
    <HeaderContent>
        <MudTh>Entry Date</MudTh>
        <MudTh>Draw Date</MudTh>
        <MudTh>Agent</MudTh>
        <MudTh>Game</MudTh>
        <MudTh>Sales</MudTh>
        <MudTh>Wins</MudTh>
        @*<MudTh>Outstanding Balance</MudTh>*@
        <MudTh>Description</MudTh>
        <MudTh>Staff ID</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="EntryDate">@context.EntryDate</MudTd>
        <MudTd DataLabel="DrawDate">@context.DrawDate</MudTd>
        <MudTd DataLabel="Agent">@context.AgentName</MudTd>
        <MudTd DataLabel="Game">@context.GameName</MudTd>
        <MudTd DataLabel="Sales">@String.Format("{0:0,0.00}", context.DailySales)</MudTd>
        <MudTd DataLabel="Amount">@String.Format("{0:0,0.00}", context.WinAmount)</MudTd>
        @*<MudTd DataLabel="Sales">@String.Format("{0:0,0.00}",context.OutstandingBalance)</MudTd>*@
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Description">@context.StaffId</MudTd>
        <MudTd DataLabel="">
            @if (context.Approved == false)
                {
                    @if (isAdmin)
                    {
                        <MudFab @onclick="@(()=>ApproveTransaction(@context.Id))" Icon="@Icons.Material.Filled.CheckCircleOutline" Size="Size.Small" />
                    }
                    else
                    {
                        <MudFab @onclick="@(()=>EditTransaction(@context.Id))" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" />
                    }
                }
        </MudTd>
    </RowTemplate>
    <FooterContent>
        @*<MudTFootRow Class="bold-text">*@
          <MudTd>&nbsp</MudTd>
          <MudTd>&nbsp</MudTd>
          <MudTd>&nbsp</MudTd>
          <MudTd>&nbsp</MudTd>
          <MudTd>@String.Format("{0:0,0.00}",DailySales)</MudTd>
          <MudTd>@String.Format("{0:0,0.00}",Wins)</MudTd>
          <MudTd>&nbsp</MudTd>
          @*<MudTd>@String.Format("{0:0,0.00}",OutstandingBalance)</MudTd>*@
        @*</MudTFootRow>*@
    </FooterContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
  </MudTable>
</div>


@*<MudCard Outlined="true">
    <MudCardContent>
        <MudText Typo="Typo.h6">Summary</MudText>
        <MudSpacer />
        <MudText Typo="Typo.body2" >Total Transactions: @TotalNum</MudText>
        <MudText Typo="Typo.body2" >Total Amount:   GH₵ @TotalBalance</MudText>
    </MudCardContent>
</MudCard>*@

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private SalesDto selectedItem1 = null;
    DateTime? start = DateTime.Today;
    DateTime? end = DateTime.Today;
    private IEnumerable<Game>? games { get; set; }

    private List<SalesDto>? Elements { get; set; }
    string period = "Today";
    private bool isAdmin = false;

    public int TotalNum { get; set; }
    public decimal DailySales { get; set; }
    public decimal OutstandingBalance { get; set; }
    public decimal Wins { get; set; }

    protected override async Task OnInitializedAsync()
    {
        accountEvents.AccountAdded += async (source, e) => await ReloadAccounts(source, e);
        await GetRole();
        await GetSalesRecords();
        await GetGames();
    }
    private async Task GetSalesRecords()
    {
        var response = await Http.PostAsJsonAsync($"/api/Sales/GetTransactions", new AMS.Shared.DateRange());
        if (response.IsSuccessStatusCode)
        {
            Elements = await response.Content.ReadFromJsonAsync<List<SalesDto>>();
            DailySales = Elements.Sum(x => x.DailySales);
            Wins = Elements.Sum(x => x.WinAmount);
            TotalNum = Elements.Count;
        }
    }
    private async Task App_StateChanged(ComponentBase Source)
    {
        if (Source != this)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task ReloadAccounts(object source, EventArgs e)
    {
        await GetSalesRecords();
        await App_StateChanged((ComponentBase)source);
    }

    private bool FilterFunc1(SalesDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(SalesDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.AgentName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.GameName.Equals(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private void CalculateSummuries(string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            DailySales = Elements.Sum(x=>x.DailySales);
            Wins = Elements.Sum(x=>x.WinAmount);  
        }
        if (Elements.Select(x=>x.Description.ToUpper()).Contains(searchString.ToUpper()))
        {
            DailySales = Elements.Where(x => x.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x=>x.DailySales);
            Wins = Elements.Where(x => x.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x=>x.WinAmount);
        }
        if (Elements.Select(x=>x.AgentName.ToUpper()).Contains(searchString.ToUpper()))
        {
            DailySales = Elements.Where(x => x.AgentName.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x=>x.DailySales);
            Wins = Elements.Where(x => x.AgentName.Contains(searchString, StringComparison.OrdinalIgnoreCase)).Sum(x=>x.WinAmount);
        }
    }

    private async Task GetGames()
    {
        var result = await Http.GetFromJsonAsync<IList<Game>?>("api/Game/GetGames");
        if (result is not null)
        {
            games = result;
        }
        else
        {
            games = new List<Game>();
        }
    }

    async Task EditTransaction(string TransactionId)
    {
        SalesDto transaction = Elements.FirstOrDefault(x => x.Id == TransactionId);
        if(transaction != null)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(EditAgentsTransaction.Transaction), transaction);

            var transactionModal = Modal.Show<EditAgentsTransaction>("Edit Sales", parameters);
            var result = await transactionModal.Result;
            if(result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
            }
            else
            {
                accountEvents.AccountAdded += async (source, e) => await ReloadAccounts(source, e);
                await GetSalesRecords();
                         
            }
        }
    }
    async Task ApproveTransaction(string TransactionId)
    {
        SalesDto transaction = Elements.FirstOrDefault(x => x.Id == TransactionId);
        if(transaction != null)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ApproveSales.Transaction), transaction);

            var transactionModal = Modal.Show<ApproveSales>("Approve Sales Transaction", parameters);
            var result = await transactionModal.Result;
            if(result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
            }
            else
            {
                accountEvents.AccountAdded += async (source, e) => await ReloadAccounts(source, e);
                await GetSalesRecords();
                         
            }
        }
    }

    async Task DeleteTransaction(string Id)
    {
        SalesDto transaction = Elements.FirstOrDefault(x => x.Id == Id);
        if(transaction != null)
        {
            var transactionModal = Modal.Show<ConfirmDelete>("Confirm Delete");
            var result = await transactionModal.Result;
            if(result.Cancelled == false)
            {
                var response = await Http.DeleteAsync($"/api/Sales/{Id}");
                if(response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Deletion Was Successful", Severity.Info);
                    Elements.Remove(transaction);
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add("Deletion Failed", Severity.Error);   
                }
            }
        }
    }

    async Task ShowModal()
    {
        var transactionModal = Modal.Show<AddSales>("Add Sales/Wins");
        var result = await transactionModal.Result;
        if(result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            //Console.WriteLine(result.Data);
            //Elements.Add((SalesDto) result.Data);
            //StateHasChanged();
            accountEvents.AccountAdded += async (source, e) => await ReloadAccounts(source, e);
            await GetSalesRecords();
        }
    }

    async Task PeriodChanged()
    {
        var dateRange = new AMS.Shared.DateRange { StartDate = start, EndDate = end };
        var response = await Http.PostAsJsonAsync($"/api/Sales/GetTransactions", dateRange);
        if (response.IsSuccessStatusCode)
        {
            Elements = await response.Content.ReadFromJsonAsync<List<SalesDto>>();
            DailySales = Elements.Sum(x => x.DailySales);
            Wins = Elements.Sum(x => x.WinAmount);
            TotalNum = Elements.Count;
        }
    }

    private async Task GetRole()
    {
        string role = (await AuthStateProvider.GetAuthenticationStateAsync())
        .User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role).Value;
        if (role.Contains("Admin"))
        {
            isAdmin = true;
        }
    }
    void IDisposable.Dispose()
    {
        accountEvents.AccountAdded -= async (source, e) => await ReloadAccounts(source, e);
    }
}
